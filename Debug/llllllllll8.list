
llllllllll8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004068  08004068  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004070  08004070  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000078  080040f0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080040f0  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd1e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c87  00000000  00000000  0002bdc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002e620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159af  00000000  00000000  0002f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b467  00000000  00000000  00044ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af14  00000000  00000000  0004ff2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dae42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003544  00000000  00000000  000dae98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e2c 	.word	0x08003e2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003e2c 	.word	0x08003e2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b0bc      	sub	sp, #240	; 0xf0
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fdd5 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 fac5 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fb79 	bl	8000c8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fb4d 	bl	8000c38 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800059e:	f000 fb27 	bl	8000bf0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 80005a2:	48c4      	ldr	r0, [pc, #784]	; (80008b4 <main+0x32c>)
 80005a4:	f001 fdfb 	bl	800219e <HAL_TIM_Base_Start_IT>
  {
   sprintf(temp,"%d\r\n",f);
 80005a8:	4bc3      	ldr	r3, [pc, #780]	; (80008b8 <main+0x330>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	49c3      	ldr	r1, [pc, #780]	; (80008bc <main+0x334>)
 80005b0:	48c3      	ldr	r0, [pc, #780]	; (80008c0 <main+0x338>)
 80005b2:	f003 f81b 	bl	80035ec <siprintf>
//   char temp[]="HELLO WORLD\r\n please type something to test UART\r\n";
   HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),100);
 80005b6:	48c2      	ldr	r0, [pc, #776]	; (80008c0 <main+0x338>)
 80005b8:	f7ff fe12 	bl	80001e0 <strlen>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	49bf      	ldr	r1, [pc, #764]	; (80008c0 <main+0x338>)
 80005c4:	48bf      	ldr	r0, [pc, #764]	; (80008c4 <main+0x33c>)
 80005c6:	f002 f820 	bl	800260a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UARTRecieveAndResponsePolling();
 80005ca:	f000 fbcf 	bl	8000d6c <UARTRecieveAndResponsePolling>
	  buttonstatus[0]=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	48bd      	ldr	r0, [pc, #756]	; (80008c8 <main+0x340>)
 80005d4:	f001 f900 	bl	80017d8 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4bbb      	ldr	r3, [pc, #748]	; (80008cc <main+0x344>)
 80005de:	701a      	strb	r2, [r3, #0]
	  		/*Method 2 Interrupt Mode*/
	  HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 80005e0:	2220      	movs	r2, #32
 80005e2:	49bb      	ldr	r1, [pc, #748]	; (80008d0 <main+0x348>)
 80005e4:	48b7      	ldr	r0, [pc, #732]	; (80008c4 <main+0x33c>)
 80005e6:	f002 f94f 	bl	8002888 <HAL_UART_Receive_IT>

	  		/*Method 2 W/ 1 Char Received*/
	  int16_t inputchar  = UARTRecieveIT();
 80005ea:	f000 fbe7 	bl	8000dbc <UARTRecieveIT>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
	  if(inputchar!=-1)
 80005f4:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d00a      	beq.n	8000614 <main+0x8c>
	  {
          //sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
		  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80005fe:	48b5      	ldr	r0, [pc, #724]	; (80008d4 <main+0x34c>)
 8000600:	f7ff fdee 	bl	80001e0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	49b1      	ldr	r1, [pc, #708]	; (80008d4 <main+0x34c>)
 800060e:	48ad      	ldr	r0, [pc, #692]	; (80008c4 <main+0x33c>)
 8000610:	f001 fffb 	bl	800260a <HAL_UART_Transmit>
      }
	  switch (STATE_Display)
 8000614:	4bb0      	ldr	r3, [pc, #704]	; (80008d8 <main+0x350>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b1f      	cmp	r3, #31
 800061a:	f200 81f2 	bhi.w	8000a02 <main+0x47a>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <main+0x9c>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	080006a5 	.word	0x080006a5
 8000628:	08000a03 	.word	0x08000a03
 800062c:	08000a03 	.word	0x08000a03
 8000630:	08000a03 	.word	0x08000a03
 8000634:	08000a03 	.word	0x08000a03
 8000638:	08000a03 	.word	0x08000a03
 800063c:	08000a03 	.word	0x08000a03
 8000640:	08000a03 	.word	0x08000a03
 8000644:	08000a03 	.word	0x08000a03
 8000648:	08000a03 	.word	0x08000a03
 800064c:	080006ad 	.word	0x080006ad
 8000650:	080006db 	.word	0x080006db
 8000654:	08000a03 	.word	0x08000a03
 8000658:	08000a03 	.word	0x08000a03
 800065c:	08000a03 	.word	0x08000a03
 8000660:	08000a03 	.word	0x08000a03
 8000664:	08000a03 	.word	0x08000a03
 8000668:	08000a03 	.word	0x08000a03
 800066c:	08000a03 	.word	0x08000a03
 8000670:	08000a03 	.word	0x08000a03
 8000674:	0800073d 	.word	0x0800073d
 8000678:	0800076b 	.word	0x0800076b
 800067c:	08000a03 	.word	0x08000a03
 8000680:	08000a03 	.word	0x08000a03
 8000684:	08000a03 	.word	0x08000a03
 8000688:	08000a03 	.word	0x08000a03
 800068c:	08000a03 	.word	0x08000a03
 8000690:	08000a03 	.word	0x08000a03
 8000694:	08000a03 	.word	0x08000a03
 8000698:	08000a03 	.word	0x08000a03
 800069c:	08000971 	.word	0x08000971
 80006a0:	080009ab 	.word	0x080009ab
	  {
		  case StateDisplay_Start:
			  STATE_Display = StateDisplay_MenuRoot_Print;
 80006a4:	4b8c      	ldr	r3, [pc, #560]	; (80008d8 <main+0x350>)
 80006a6:	220a      	movs	r2, #10
 80006a8:	601a      	str	r2, [r3, #0]
			  break;
 80006aa:	e1aa      	b.n	8000a02 <main+0x47a>
		  case StateDisplay_MenuRoot_Print: //display one time state
		  {
			  char temp[]="------------\r\n   Menu   \r\n------------\r\n1.Menu 1 LED control\r\n2.Menu 2\r\n\r\n";
 80006ac:	4a8b      	ldr	r2, [pc, #556]	; (80008dc <main+0x354>)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4611      	mov	r1, r2
 80006b2:	224b      	movs	r2, #75	; 0x4b
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 ff83 	bl	80035c0 <memcpy>
			  HAL_UART_Transmit(&huart2, (uint16_t*)temp, strlen(temp),1000);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd8f 	bl	80001e0 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	1d39      	adds	r1, r7, #4
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	487d      	ldr	r0, [pc, #500]	; (80008c4 <main+0x33c>)
 80006ce:	f001 ff9c 	bl	800260a <HAL_UART_Transmit>
			  STATE_Display = StateDisplay_MenuRoot_WaitInput;
 80006d2:	4b81      	ldr	r3, [pc, #516]	; (80008d8 <main+0x350>)
 80006d4:	220b      	movs	r2, #11
 80006d6:	601a      	str	r2, [r3, #0]
			  break;
 80006d8:	e193      	b.n	8000a02 <main+0x47a>
		  }
		  case StateDisplay_MenuRoot_WaitInput: //wait state for input
			  switch (inputchar)
 80006da:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 80006de:	2b32      	cmp	r3, #50	; 0x32
 80006e0:	d00a      	beq.n	80006f8 <main+0x170>
 80006e2:	2b32      	cmp	r3, #50	; 0x32
 80006e4:	dc0c      	bgt.n	8000700 <main+0x178>
 80006e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ea:	d025      	beq.n	8000738 <main+0x1b0>
 80006ec:	2b31      	cmp	r3, #49	; 0x31
 80006ee:	d107      	bne.n	8000700 <main+0x178>
					//no input ; just wait input
					break;
				  case '1':
				  {

					STATE_Display = StateDisplay_Menu1_Print;
 80006f0:	4b79      	ldr	r3, [pc, #484]	; (80008d8 <main+0x350>)
 80006f2:	2214      	movs	r2, #20
 80006f4:	601a      	str	r2, [r3, #0]
					break;
 80006f6:	e020      	b.n	800073a <main+0x1b2>
				  }
				  case '2':
					STATE_Display = StateDisplay_Menu2_Print;
 80006f8:	4b77      	ldr	r3, [pc, #476]	; (80008d8 <main+0x350>)
 80006fa:	221e      	movs	r2, #30
 80006fc:	601a      	str	r2, [r3, #0]
					break;
 80006fe:	e01c      	b.n	800073a <main+0x1b2>
				  default: // actully error , you can add error message
				  {
					char temp[]="////////////Wrong Input////////////\r\n";
 8000700:	4b77      	ldr	r3, [pc, #476]	; (80008e0 <main+0x358>)
 8000702:	1d3c      	adds	r4, r7, #4
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000712:	6020      	str	r0, [r4, #0]
 8000714:	3404      	adds	r4, #4
 8000716:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd60 	bl	80001e0 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	1d39      	adds	r1, r7, #4
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	4866      	ldr	r0, [pc, #408]	; (80008c4 <main+0x33c>)
 800072c:	f001 ff6d 	bl	800260a <HAL_UART_Transmit>
					STATE_Display = StateDisplay_MenuRoot_Print;
 8000730:	4b69      	ldr	r3, [pc, #420]	; (80008d8 <main+0x350>)
 8000732:	220a      	movs	r2, #10
 8000734:	601a      	str	r2, [r3, #0]
					break;
 8000736:	e000      	b.n	800073a <main+0x1b2>
					break;
 8000738:	bf00      	nop
				  }
			  }
			  break;
 800073a:	e162      	b.n	8000a02 <main+0x47a>
			  case StateDisplay_Menu1_Print: //display one time state
			  {
				  char temp[]="------------------------\r\n"
 800073c:	4a69      	ldr	r2, [pc, #420]	; (80008e4 <main+0x35c>)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4611      	mov	r1, r2
 8000742:	22aa      	movs	r2, #170	; 0xaa
 8000744:	4618      	mov	r0, r3
 8000746:	f002 ff3b 	bl	80035c0 <memcpy>
						      "------------------------\r\n"
						      "1.a increase frequency(+1)\r\n"
							  "2.s decrease frequency(-1)\r\n"
							  "3.d On/Off LED\r\n"
							  "4.x back to main menu\r\n";
				  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fd47 	bl	80001e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	1d39      	adds	r1, r7, #4
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	4859      	ldr	r0, [pc, #356]	; (80008c4 <main+0x33c>)
 800075e:	f001 ff54 	bl	800260a <HAL_UART_Transmit>
			      STATE_Display = StateDisplay_Menu1_WaitInput;
 8000762:	4b5d      	ldr	r3, [pc, #372]	; (80008d8 <main+0x350>)
 8000764:	2215      	movs	r2, #21
 8000766:	601a      	str	r2, [r3, #0]
			      break;
 8000768:	e14b      	b.n	8000a02 <main+0x47a>
			  }
			  case StateDisplay_Menu1_WaitInput:
				  switch (inputchar)
 800076a:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 800076e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000772:	f000 80fb 	beq.w	800096c <main+0x3e4>
 8000776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077a:	f2c0 80db 	blt.w	8000934 <main+0x3ac>
 800077e:	2b78      	cmp	r3, #120	; 0x78
 8000780:	f300 80d8 	bgt.w	8000934 <main+0x3ac>
 8000784:	2b61      	cmp	r3, #97	; 0x61
 8000786:	f2c0 80d5 	blt.w	8000934 <main+0x3ac>
 800078a:	3b61      	subs	r3, #97	; 0x61
 800078c:	2b17      	cmp	r3, #23
 800078e:	f200 80d1 	bhi.w	8000934 <main+0x3ac>
 8000792:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <main+0x210>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007f9 	.word	0x080007f9
 800079c:	08000935 	.word	0x08000935
 80007a0:	08000935 	.word	0x08000935
 80007a4:	08000879 	.word	0x08000879
 80007a8:	08000935 	.word	0x08000935
 80007ac:	08000935 	.word	0x08000935
 80007b0:	08000935 	.word	0x08000935
 80007b4:	08000935 	.word	0x08000935
 80007b8:	08000935 	.word	0x08000935
 80007bc:	08000935 	.word	0x08000935
 80007c0:	08000935 	.word	0x08000935
 80007c4:	08000935 	.word	0x08000935
 80007c8:	08000935 	.word	0x08000935
 80007cc:	08000935 	.word	0x08000935
 80007d0:	08000935 	.word	0x08000935
 80007d4:	08000935 	.word	0x08000935
 80007d8:	08000935 	.word	0x08000935
 80007dc:	08000935 	.word	0x08000935
 80007e0:	08000835 	.word	0x08000835
 80007e4:	08000935 	.word	0x08000935
 80007e8:	08000935 	.word	0x08000935
 80007ec:	08000935 	.word	0x08000935
 80007f0:	08000935 	.word	0x08000935
 80007f4:	0800092d 	.word	0x0800092d
					  case -1:
						//no input ; just wait input
						break;
					  case 'a':
					  {
						f+=1;
 80007f8:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <main+0x330>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <main+0x330>)
 8000800:	6013      	str	r3, [r2, #0]
						sprintf(s, "Curent frequency:[%d]\r\n", f);
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <main+0x330>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	4937      	ldr	r1, [pc, #220]	; (80008e8 <main+0x360>)
 800080a:	4838      	ldr	r0, [pc, #224]	; (80008ec <main+0x364>)
 800080c:	f002 feee 	bl	80035ec <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s),1000);
 8000810:	4836      	ldr	r0, [pc, #216]	; (80008ec <main+0x364>)
 8000812:	f7ff fce5 	bl	80001e0 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	4933      	ldr	r1, [pc, #204]	; (80008ec <main+0x364>)
 8000820:	4828      	ldr	r0, [pc, #160]	; (80008c4 <main+0x33c>)
 8000822:	f001 fef2 	bl	800260a <HAL_UART_Transmit>
						inputchar = ' ';
 8000826:	2320      	movs	r3, #32
 8000828:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
						STATE_Display = StateDisplay_Menu1_Print;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <main+0x350>)
 800082e:	2214      	movs	r2, #20
 8000830:	601a      	str	r2, [r3, #0]
						break;
 8000832:	e09c      	b.n	800096e <main+0x3e6>
					  }
					  case 's':
					  {
						f-=1;
 8000834:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <main+0x330>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3b01      	subs	r3, #1
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <main+0x330>)
 800083c:	6013      	str	r3, [r2, #0]
						if(f<0)
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <main+0x330>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da02      	bge.n	800084c <main+0x2c4>
						{
							f = 0;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <main+0x330>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
						}
						sprintf(s, "Curent frequency:[%d]\r\n", f);
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <main+0x330>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4925      	ldr	r1, [pc, #148]	; (80008e8 <main+0x360>)
 8000854:	4825      	ldr	r0, [pc, #148]	; (80008ec <main+0x364>)
 8000856:	f002 fec9 	bl	80035ec <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s),1000);
 800085a:	4824      	ldr	r0, [pc, #144]	; (80008ec <main+0x364>)
 800085c:	f7ff fcc0 	bl	80001e0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29a      	uxth	r2, r3
 8000864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000868:	4920      	ldr	r1, [pc, #128]	; (80008ec <main+0x364>)
 800086a:	4816      	ldr	r0, [pc, #88]	; (80008c4 <main+0x33c>)
 800086c:	f001 fecd 	bl	800260a <HAL_UART_Transmit>
						STATE_Display = StateDisplay_Menu1_Print;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <main+0x350>)
 8000872:	2214      	movs	r2, #20
 8000874:	601a      	str	r2, [r3, #0]
						break;
 8000876:	e07a      	b.n	800096e <main+0x3e6>
					  }
					  case 'd':

						STATE_Display = StateDisplay_Menu1_Print;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <main+0x350>)
 800087a:	2214      	movs	r2, #20
 800087c:	601a      	str	r2, [r3, #0]
						if(blink==1)
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <main+0x368>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d138      	bne.n	80008f8 <main+0x370>
						{
							blink=0;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <main+0x368>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
							sprintf(s, "     LED OFF\r\n", f);
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <main+0x330>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4918      	ldr	r1, [pc, #96]	; (80008f4 <main+0x36c>)
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <main+0x364>)
 8000896:	f002 fea9 	bl	80035ec <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s),1000);
 800089a:	4814      	ldr	r0, [pc, #80]	; (80008ec <main+0x364>)
 800089c:	f7ff fca0 	bl	80001e0 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a8:	4910      	ldr	r1, [pc, #64]	; (80008ec <main+0x364>)
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <main+0x33c>)
 80008ac:	f001 fead 	bl	800260a <HAL_UART_Transmit>
							break;
 80008b0:	e05d      	b.n	800096e <main+0x3e6>
 80008b2:	bf00      	nop
 80008b4:	200001c4 	.word	0x200001c4
 80008b8:	20000004 	.word	0x20000004
 80008bc:	08003e44 	.word	0x08003e44
 80008c0:	200000e0 	.word	0x200000e0
 80008c4:	20000204 	.word	0x20000204
 80008c8:	40020800 	.word	0x40020800
 80008cc:	200001b0 	.word	0x200001b0
 80008d0:	200000c0 	.word	0x200000c0
 80008d4:	200000a0 	.word	0x200000a0
 80008d8:	200001a8 	.word	0x200001a8
 80008dc:	08003e84 	.word	0x08003e84
 80008e0:	08003ed0 	.word	0x08003ed0
 80008e4:	08003ef8 	.word	0x08003ef8
 80008e8:	08003e4c 	.word	0x08003e4c
 80008ec:	20000144 	.word	0x20000144
 80008f0:	20000000 	.word	0x20000000
 80008f4:	08003e64 	.word	0x08003e64
						}
						if(blink==0)
 80008f8:	4b7c      	ldr	r3, [pc, #496]	; (8000aec <main+0x564>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d115      	bne.n	800092c <main+0x3a4>
						{
							blink=1;
 8000900:	4b7a      	ldr	r3, [pc, #488]	; (8000aec <main+0x564>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
							sprintf(s, "     LED ON\r\n", f);
 8000906:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <main+0x568>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	4979      	ldr	r1, [pc, #484]	; (8000af4 <main+0x56c>)
 800090e:	487a      	ldr	r0, [pc, #488]	; (8000af8 <main+0x570>)
 8000910:	f002 fe6c 	bl	80035ec <siprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s),1000);
 8000914:	4878      	ldr	r0, [pc, #480]	; (8000af8 <main+0x570>)
 8000916:	f7ff fc63 	bl	80001e0 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	4975      	ldr	r1, [pc, #468]	; (8000af8 <main+0x570>)
 8000924:	4875      	ldr	r0, [pc, #468]	; (8000afc <main+0x574>)
 8000926:	f001 fe70 	bl	800260a <HAL_UART_Transmit>
							break;
 800092a:	e020      	b.n	800096e <main+0x3e6>
						}
					  case 'x': // back to main manu(10)
						STATE_Display = StateDisplay_MenuRoot_Print;
 800092c:	4b74      	ldr	r3, [pc, #464]	; (8000b00 <main+0x578>)
 800092e:	220a      	movs	r2, #10
 8000930:	601a      	str	r2, [r3, #0]
						break;
 8000932:	e01c      	b.n	800096e <main+0x3e6>
					  default: // actully error , you can add error message
					  {
						STATE_Display = StateDisplay_Menu1_Print;
 8000934:	4b72      	ldr	r3, [pc, #456]	; (8000b00 <main+0x578>)
 8000936:	2214      	movs	r2, #20
 8000938:	601a      	str	r2, [r3, #0]
						char temp[]="////////////Wrong Input////////////\r\n";
 800093a:	4b72      	ldr	r3, [pc, #456]	; (8000b04 <main+0x57c>)
 800093c:	1d3c      	adds	r4, r7, #4
 800093e:	461d      	mov	r5, r3
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000948:	e895 0003 	ldmia.w	r5, {r0, r1}
 800094c:	6020      	str	r0, [r4, #0]
 800094e:	3404      	adds	r4, #4
 8000950:	8021      	strh	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fc43 	bl	80001e0 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	b29a      	uxth	r2, r3
 800095e:	1d39      	adds	r1, r7, #4
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	4865      	ldr	r0, [pc, #404]	; (8000afc <main+0x574>)
 8000966:	f001 fe50 	bl	800260a <HAL_UART_Transmit>
						break;
 800096a:	e000      	b.n	800096e <main+0x3e6>
						break;
 800096c:	bf00      	nop
					  }
				  }
				  break;
 800096e:	e048      	b.n	8000a02 <main+0x47a>
			  case StateDisplay_Menu2_Print: //display state
			  {
				  char temp[]="************\r\nMenu 2\r\n************\r\nx.back to main menu\r\n";
 8000970:	4b65      	ldr	r3, [pc, #404]	; (8000b08 <main+0x580>)
 8000972:	1d3c      	adds	r4, r7, #4
 8000974:	461d      	mov	r5, r3
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000982:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000986:	c403      	stmia	r4!, {r0, r1}
 8000988:	8022      	strh	r2, [r4, #0]
				  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc27 	bl	80001e0 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	1d39      	adds	r1, r7, #4
 8000998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099c:	4857      	ldr	r0, [pc, #348]	; (8000afc <main+0x574>)
 800099e:	f001 fe34 	bl	800260a <HAL_UART_Transmit>
				  STATE_Display = StateDisplay_Menu2_WaitInput;
 80009a2:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <main+0x578>)
 80009a4:	221f      	movs	r2, #31
 80009a6:	601a      	str	r2, [r3, #0]
				  break;
 80009a8:	e02b      	b.n	8000a02 <main+0x47a>
			  }
			  case StateDisplay_Menu2_WaitInput: //make decision state
			  {
				  b = 1;
 80009aa:	4b58      	ldr	r3, [pc, #352]	; (8000b0c <main+0x584>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
				  switch(inputchar)
 80009b0:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d021      	beq.n	80009fe <main+0x476>
 80009ba:	2b78      	cmp	r3, #120	; 0x78
 80009bc:	d103      	bne.n	80009c6 <main+0x43e>
				  {
				     case 'x':
					    STATE_Display = StateDisplay_MenuRoot_Print;
 80009be:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <main+0x578>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	601a      	str	r2, [r3, #0]
					 	break;
 80009c4:	e01c      	b.n	8000a00 <main+0x478>
				     case -1:
				    	break;
				     default: // actully error , you can add error message
					 {
						STATE_Display = StateDisplay_Menu2_Print;
 80009c6:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <main+0x578>)
 80009c8:	221e      	movs	r2, #30
 80009ca:	601a      	str	r2, [r3, #0]
						char temp[]="////////////Wrong Input////////////\r\n";
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <main+0x57c>)
 80009ce:	1d3c      	adds	r4, r7, #4
 80009d0:	461d      	mov	r5, r3
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009de:	6020      	str	r0, [r4, #0]
 80009e0:	3404      	adds	r4, #4
 80009e2:	8021      	strh	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fbfa 	bl	80001e0 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	1d39      	adds	r1, r7, #4
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	4841      	ldr	r0, [pc, #260]	; (8000afc <main+0x574>)
 80009f8:	f001 fe07 	bl	800260a <HAL_UART_Transmit>
						break;
 80009fc:	e000      	b.n	8000a00 <main+0x478>
				    	break;
 80009fe:	bf00      	nop
					 }
				  }
			  }
		      break;
 8000a00:	bf00      	nop
	    }
		/*This section just simmulate Work Load*/
	if(f>0)
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <main+0x568>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	dd10      	ble.n	8000a2c <main+0x4a4>
	{
		if(blink == 1 )
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <main+0x564>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d10c      	bne.n	8000a2c <main+0x4a4>
		{
			HAL_Delay(500/f);
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <main+0x568>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fbfe 	bl	8001220 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a24:	2120      	movs	r1, #32
 8000a26:	483a      	ldr	r0, [pc, #232]	; (8000b10 <main+0x588>)
 8000a28:	f000 ff07 	bl	800183a <HAL_GPIO_TogglePin>
		}
	}
	if(STATE_Display == 31)
 8000a2c:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <main+0x578>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b1f      	cmp	r3, #31
 8000a32:	d149      	bne.n	8000ac8 <main+0x540>
	{
		if(buttonstatus[0]==0 && buttonstatus[1]==1)
 8000a34:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <main+0x58c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d122      	bne.n	8000a82 <main+0x4fa>
 8000a3c:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <main+0x58c>)
 8000a3e:	785b      	ldrb	r3, [r3, #1]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d11e      	bne.n	8000a82 <main+0x4fa>
		{
			char temp[]="\r\n\r\nButton Status: Press\r\n";
 8000a44:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <main+0x590>)
 8000a46:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000a4a:	461d      	mov	r5, r3
 8000a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a54:	c403      	stmia	r4!, {r0, r1}
 8000a56:	8022      	strh	r2, [r4, #0]
 8000a58:	3402      	adds	r4, #2
 8000a5a:	0c13      	lsrs	r3, r2, #16
 8000a5c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8000a5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fbbc 	bl	80001e0 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	4821      	ldr	r0, [pc, #132]	; (8000afc <main+0x574>)
 8000a76:	f001 fdc8 	bl	800260a <HAL_UART_Transmit>
			STATE_Display=30;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <main+0x578>)
 8000a7c:	221e      	movs	r2, #30
 8000a7e:	601a      	str	r2, [r3, #0]
		{
 8000a80:	e022      	b.n	8000ac8 <main+0x540>
		}
		else if(buttonstatus[0]==1 && buttonstatus[1]==0)
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <main+0x58c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d11e      	bne.n	8000ac8 <main+0x540>
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <main+0x58c>)
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d11a      	bne.n	8000ac8 <main+0x540>
		{
			char temp[]="\r\n\r\nButton Status: Unpress\r\n";
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <main+0x594>)
 8000a94:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000a98:	461d      	mov	r5, r3
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aa2:	c407      	stmia	r4!, {r0, r1, r2}
 8000aa4:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8000aa6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fb98 	bl	80001e0 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abc:	480f      	ldr	r0, [pc, #60]	; (8000afc <main+0x574>)
 8000abe:	f001 fda4 	bl	800260a <HAL_UART_Transmit>
			STATE_Display=30;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <main+0x578>)
 8000ac4:	221e      	movs	r2, #30
 8000ac6:	601a      	str	r2, [r3, #0]
		}
	}
	if(blink == 0 || f <= 0)
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <main+0x564>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <main+0x550>
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <main+0x568>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dc04      	bgt.n	8000ae2 <main+0x55a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2120      	movs	r1, #32
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <main+0x588>)
 8000ade:	f000 fe93 	bl	8001808 <HAL_GPIO_WritePin>
	}
    buttonstatus[1]=buttonstatus[0];
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <main+0x58c>)
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <main+0x58c>)
 8000ae8:	705a      	strb	r2, [r3, #1]
  {
 8000aea:	e56e      	b.n	80005ca <main+0x42>
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000004 	.word	0x20000004
 8000af4:	08003e74 	.word	0x08003e74
 8000af8:	20000144 	.word	0x20000144
 8000afc:	20000204 	.word	0x20000204
 8000b00:	200001a8 	.word	0x200001a8
 8000b04:	08003ed0 	.word	0x08003ed0
 8000b08:	08003fa4 	.word	0x08003fa4
 8000b0c:	200001ac 	.word	0x200001ac
 8000b10:	40020000 	.word	0x40020000
 8000b14:	200001b0 	.word	0x200001b0
 8000b18:	08003fe0 	.word	0x08003fe0
 8000b1c:	08003ffc 	.word	0x08003ffc

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	; 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	; 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 fd54 	bl	80035dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <SystemClock_Config+0xc8>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <SystemClock_Config+0xc8>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <SystemClock_Config+0xc8>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <SystemClock_Config+0xcc>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <SystemClock_Config+0xcc>)
 8000b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <SystemClock_Config+0xcc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b84:	2310      	movs	r3, #16
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b90:	2308      	movs	r3, #8
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fe63 	bl	8001870 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb0:	f000 f96a 	bl	8000e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2103      	movs	r1, #3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 f8bd 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bdc:	f000 f954 	bl	8000e88 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3750      	adds	r7, #80	; 0x50
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_TIM11_Init+0x40>)
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <MX_TIM11_Init+0x44>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <MX_TIM11_Init+0x40>)
 8000bfc:	2263      	movs	r2, #99	; 0x63
 8000bfe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_TIM11_Init+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <MX_TIM11_Init+0x40>)
 8000c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_TIM11_Init+0x40>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_TIM11_Init+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM11_Init+0x40>)
 8000c1c:	f001 fa94 	bl	8002148 <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c26:	f000 f92f 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001c4 	.word	0x200001c4
 8000c34:	40014800 	.word	0x40014800

08000c38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_USART2_UART_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c70:	f001 fc7e 	bl	8002570 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c7a:	f000 f905 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000204 	.word	0x20000204
 8000c88:	40004400 	.word	0x40004400

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a2c      	ldr	r2, [pc, #176]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_GPIO_Init+0xd0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2120      	movs	r1, #32
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000d18:	f000 fd76 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_GPIO_Init+0xd8>)
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_GPIO_Init+0xdc>)
 8000d32:	f000 fbcd 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d36:	2320      	movs	r3, #32
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_GPIO_Init+0xd4>)
 8000d4e:	f000 fbbf 	bl	80014d0 <HAL_GPIO_Init>

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	10110000 	.word	0x10110000
 8000d68:	40020800 	.word	0x40020800

08000d6c <UARTRecieveAndResponsePolling>:

/* USER CODE BEGIN 4 */
void UARTRecieveAndResponsePolling()
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
	char Recieve[32]={0};
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]

	HAL_UART_Receive(&huart2, (uint8_t*)Recieve, 32, 1000);
 8000d88:	4639      	mov	r1, r7
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	2220      	movs	r2, #32
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <UARTRecieveAndResponsePolling+0x48>)
 8000d92:	f001 fcd3 	bl	800273c <HAL_UART_Receive>

	//sprintf(TxDataBuffer, "Received:[%s]\r\n", Recieve);
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <UARTRecieveAndResponsePolling+0x4c>)
 8000d98:	f7ff fa22 	bl	80001e0 <strlen>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	4904      	ldr	r1, [pc, #16]	; (8000db8 <UARTRecieveAndResponsePolling+0x4c>)
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <UARTRecieveAndResponsePolling+0x48>)
 8000da8:	f001 fc2f 	bl	800260a <HAL_UART_Transmit>

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000204 	.word	0x20000204
 8000db8:	200000a0 	.word	0x200000a0

08000dbc <UARTRecieveIT>:


int16_t UARTRecieveIT()
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8000dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc6:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <UARTRecieveIT+0x54>)
 8000dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <UARTRecieveIT+0x54>)
 8000dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <UARTRecieveIT+0x58>)
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d010      	beq.n	8000e00 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <UARTRecieveIT+0x58>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <UARTRecieveIT+0x5c>)
 8000de4:	5cd3      	ldrb	r3, [r2, r3]
 8000de6:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <UARTRecieveIT+0x58>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <UARTRecieveIT+0x54>)
 8000df0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000df6:	fb02 f201 	mul.w	r2, r2, r1
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <UARTRecieveIT+0x58>)
 8000dfe:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20000204 	.word	0x20000204
 8000e14:	200001b4 	.word	0x200001b4
 8000e18:	200000c0 	.word	0x200000c0

08000e1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <HAL_UART_RxCpltCallback+0x28>)
 8000e26:	f7ff f9db 	bl	80001e0 <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	4904      	ldr	r1, [pc, #16]	; (8000e44 <HAL_UART_RxCpltCallback+0x28>)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <HAL_UART_RxCpltCallback+0x2c>)
 8000e36:	f001 fbe8 	bl	800260a <HAL_UART_Transmit>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000a0 	.word	0x200000a0
 8000e48:	20000204 	.word	0x20000204

08000e4c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e4c:	b4b0      	push	{r4, r5, r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d10c      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x2a>
		_micros += 65535;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e66:	f04f 0100 	mov.w	r1, #0
 8000e6a:	1814      	adds	r4, r2, r0
 8000e6c:	eb43 0501 	adc.w	r5, r3, r1
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e72:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bcb0      	pop	{r4, r5, r7}
 8000e7e:	4770      	bx	lr
 8000e80:	200001c4 	.word	0x200001c4
 8000e84:	20000098 	.word	0x20000098

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x8>
	...

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ed2:	2007      	movs	r0, #7
 8000ed4:	f000 fa98 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_TIM_Base_MspInit+0x48>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d115      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_TIM_Base_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	201a      	movs	r0, #26
 8000f18:	f000 fa81 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f1c:	201a      	movs	r0, #26
 8000f1e:	f000 fa9a 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40014800 	.word	0x40014800
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1d      	ldr	r2, [pc, #116]	; (8000fc8 <HAL_UART_MspInit+0x94>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d133      	bne.n	8000fbe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_UART_MspInit+0x98>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <HAL_UART_MspInit+0x98>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0x98>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_UART_MspInit+0x98>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_UART_MspInit+0x98>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_UART_MspInit+0x98>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8e:	230c      	movs	r3, #12
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_UART_MspInit+0x9c>)
 8000faa:	f000 fa91 	bl	80014d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2026      	movs	r0, #38	; 0x26
 8000fb4:	f000 fa33 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fb8:	2026      	movs	r0, #38	; 0x26
 8000fba:	f000 fa4c 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f8de 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800102e:	f001 f8da 	bl	80021e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001c4 	.word	0x200001c4

0800103c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <USART2_IRQHandler+0x10>)
 8001042:	f001 fc77 	bl	8002934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000204 	.word	0x20000204

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f002 fa74 	bl	800356c <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20020000 	.word	0x20020000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	200001b8 	.word	0x200001b8
 80010b8:	20000258 	.word	0x20000258

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <SystemInit+0x28>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <SystemInit+0x28>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SystemInit+0x28>)
 80010d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010d6:	609a      	str	r2, [r3, #8]
#endif
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ee:	e003      	b.n	80010f8 <LoopCopyDataInit>

080010f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010f6:	3104      	adds	r1, #4

080010f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001100:	d3f6      	bcc.n	80010f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001104:	e002      	b.n	800110c <LoopFillZerobss>

08001106 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001106:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001108:	f842 3b04 	str.w	r3, [r2], #4

0800110c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800110e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001110:	d3f9      	bcc.n	8001106 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001112:	f7ff ffd3 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f002 fa2f 	bl	8003578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fa35 	bl	8000588 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001120:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001124:	08004078 	.word	0x08004078
  ldr  r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800112c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001130:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001134:	20000258 	.word	0x20000258

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_Init+0x40>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_Init+0x40>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x40>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f94f 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fe90 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f967 	bl	8001472 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f92f 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000010 	.word	0x20000010
 80011dc:	2000000c 	.word	0x2000000c

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000010 	.word	0x20000010
 8001204:	20000244 	.word	0x20000244

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000244 	.word	0x20000244

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000010 	.word	0x20000010

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff3e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff31 	bl	80012cc <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d004      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e00c      	b.n	80014c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2205      	movs	r2, #5
 80014ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e159      	b.n	80017a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8148 	bne.w	800179a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d00b      	beq.n	800152a <HAL_GPIO_Init+0x5a>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151e:	2b11      	cmp	r3, #17
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b12      	cmp	r3, #18
 8001528:	d130      	bne.n	800158c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0xfc>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d123      	bne.n	8001614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	08da      	lsrs	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3208      	adds	r2, #8
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	69b9      	ldr	r1, [r7, #24]
 8001610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0203 	and.w	r2, r3, #3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a2 	beq.w	800179a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b57      	ldr	r3, [pc, #348]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a56      	ldr	r2, [pc, #344]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b54      	ldr	r3, [pc, #336]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a52      	ldr	r2, [pc, #328]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x202>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <HAL_GPIO_Init+0x2f4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x1fe>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a47      	ldr	r2, [pc, #284]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a46      	ldr	r2, [pc, #280]	; (80017cc <HAL_GPIO_Init+0x2fc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x1f6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a45      	ldr	r2, [pc, #276]	; (80017d0 <HAL_GPIO_Init+0x300>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x1f2>
 80016be:	2304      	movs	r3, #4
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_GPIO_Init+0x304>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001716:	4a2f      	ldr	r2, [pc, #188]	; (80017d4 <HAL_GPIO_Init+0x304>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_GPIO_Init+0x304>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001740:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_GPIO_Init+0x304>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_GPIO_Init+0x304>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <HAL_GPIO_Init+0x304>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_GPIO_Init+0x304>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_GPIO_Init+0x304>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f aea2 	bls.w	80014ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e001      	b.n	80017fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001824:	e003      	b.n	800182e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	041a      	lsls	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	619a      	str	r2, [r3, #24]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	401a      	ands	r2, r3
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	429a      	cmp	r2, r3
 8001852:	d104      	bne.n	800185e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	041a      	lsls	r2, r3, #16
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800185c:	e002      	b.n	8001864 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e25b      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d075      	beq.n	800197a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800188e:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b04      	cmp	r3, #4
 8001898:	d00c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189a:	4ba0      	ldr	r3, [pc, #640]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a6:	4b9d      	ldr	r3, [pc, #628]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b2:	d10b      	bne.n	80018cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	4b99      	ldr	r3, [pc, #612]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d05b      	beq.n	8001978 <HAL_RCC_OscConfig+0x108>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d157      	bne.n	8001978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e236      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x74>
 80018d6:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a90      	ldr	r2, [pc, #576]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e01d      	b.n	8001920 <HAL_RCC_OscConfig+0xb0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x98>
 80018ee:	4b8b      	ldr	r3, [pc, #556]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a8a      	ldr	r2, [pc, #552]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a87      	ldr	r2, [pc, #540]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0xb0>
 8001908:	4b84      	ldr	r3, [pc, #528]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a83      	ldr	r2, [pc, #524]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800190e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b81      	ldr	r3, [pc, #516]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a80      	ldr	r2, [pc, #512]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fc6e 	bl	8001208 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fc6a 	bl	8001208 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1fb      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0xc0>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fc5a 	bl	8001208 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fc56 	bl	8001208 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1e7      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0xe8>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001992:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199a:	2b08      	cmp	r3, #8
 800199c:	d11c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d116      	bne.n	80019d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_OscConfig+0x152>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e1bb      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4952      	ldr	r1, [pc, #328]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	e03a      	b.n	8001a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e0:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <HAL_RCC_OscConfig+0x2b0>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fc0f 	bl	8001208 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff fc0b 	bl	8001208 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e19c      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4940      	ldr	r1, [pc, #256]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a22:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_RCC_OscConfig+0x2b0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fbee 	bl	8001208 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff fbea 	bl	8001208 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e17b      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d030      	beq.n	8001abc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d016      	beq.n	8001a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_RCC_OscConfig+0x2b4>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff fbce 	bl	8001208 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff fbca 	bl	8001208 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e15b      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x200>
 8001a8e:	e015      	b.n	8001abc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x2b4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fbb7 	bl	8001208 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fbb3 	bl	8001208 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e144      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80a0 	beq.w	8001c0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10f      	bne.n	8001afa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x2b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d121      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_RCC_OscConfig+0x2b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_RCC_OscConfig+0x2b8>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b12:	f7ff fb79 	bl	8001208 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	e011      	b.n	8001b3e <HAL_RCC_OscConfig+0x2ce>
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	42470000 	.word	0x42470000
 8001b24:	42470e80 	.word	0x42470e80
 8001b28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2c:	f7ff fb6c 	bl	8001208 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0fd      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	4b81      	ldr	r3, [pc, #516]	; (8001d44 <HAL_RCC_OscConfig+0x4d4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
 8001b52:	4b7d      	ldr	r3, [pc, #500]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a7c      	ldr	r2, [pc, #496]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	e01c      	b.n	8001b9a <HAL_RCC_OscConfig+0x32a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d10c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x312>
 8001b68:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a76      	ldr	r2, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	4b74      	ldr	r3, [pc, #464]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a73      	ldr	r2, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x32a>
 8001b82:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	4a70      	ldr	r2, [pc, #448]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	4a6d      	ldr	r2, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d015      	beq.n	8001bce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fb31 	bl	8001208 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff fb2d 	bl	8001208 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0bc      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ee      	beq.n	8001baa <HAL_RCC_OscConfig+0x33a>
 8001bcc:	e014      	b.n	8001bf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fb1b 	bl	8001208 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff fb17 	bl	8001208 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0a6      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	4b56      	ldr	r3, [pc, #344]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ee      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d105      	bne.n	8001c0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a51      	ldr	r2, [pc, #324]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8092 	beq.w	8001d38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d05c      	beq.n	8001cda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d141      	bne.n	8001cac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c28:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <HAL_RCC_OscConfig+0x4dc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff faeb 	bl	8001208 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff fae7 	bl	8001208 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e078      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c48:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	019b      	lsls	r3, r3, #6
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	061b      	lsls	r3, r3, #24
 8001c78:	4933      	ldr	r1, [pc, #204]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7e:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_RCC_OscConfig+0x4dc>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fac0 	bl	8001208 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff fabc 	bl	8001208 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04d      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x41c>
 8001caa:	e045      	b.n	8001d38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x4dc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff faa9 	bl	8001208 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff faa5 	bl	8001208 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e036      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f0      	bne.n	8001cba <HAL_RCC_OscConfig+0x44a>
 8001cd8:	e02e      	b.n	8001d38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e029      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d115      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d0e:	4013      	ands	r3, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d10d      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d106      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	42470060 	.word	0x42470060

08001d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0cc      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d90c      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b63      	ldr	r3, [pc, #396]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b8      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	494d      	ldr	r1, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d044      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d119      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e067      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4934      	ldr	r1, [pc, #208]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e40:	f7ff f9e2 	bl	8001208 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff f9de 	bl	8001208 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e04f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d20c      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e032      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4916      	ldr	r1, [pc, #88]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	490e      	ldr	r1, [pc, #56]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ed6:	f000 f821 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001eda:	4602      	mov	r2, r0
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	490a      	ldr	r1, [pc, #40]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	5ccb      	ldrb	r3, [r1, r3]
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f942 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	0800401c 	.word	0x0800401c
 8001f14:	20000008 	.word	0x20000008
 8001f18:	2000000c 	.word	0x2000000c

08001f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f34:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d00d      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x40>
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	f200 80bd 	bhi.w	80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x34>
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f4e:	e0b7      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f52:	60bb      	str	r3, [r7, #8]
       break;
 8001f54:	e0b7      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f56:	4b61      	ldr	r3, [pc, #388]	; (80020dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f58:	60bb      	str	r3, [r7, #8]
      break;
 8001f5a:	e0b4      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4b5d      	ldr	r3, [pc, #372]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f66:	4b5b      	ldr	r3, [pc, #364]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d04d      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f82:	f04f 0100 	mov.w	r1, #0
 8001f86:	ea02 0800 	and.w	r8, r2, r0
 8001f8a:	ea03 0901 	and.w	r9, r3, r1
 8001f8e:	4640      	mov	r0, r8
 8001f90:	4649      	mov	r1, r9
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	014b      	lsls	r3, r1, #5
 8001f9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fa0:	0142      	lsls	r2, r0, #5
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	ebb0 0008 	subs.w	r0, r0, r8
 8001faa:	eb61 0109 	sbc.w	r1, r1, r9
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	018b      	lsls	r3, r1, #6
 8001fb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fbc:	0182      	lsls	r2, r0, #6
 8001fbe:	1a12      	subs	r2, r2, r0
 8001fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc4:	f04f 0000 	mov.w	r0, #0
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	00d9      	lsls	r1, r3, #3
 8001fce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fd2:	00d0      	lsls	r0, r2, #3
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	eb12 0208 	adds.w	r2, r2, r8
 8001fdc:	eb43 0309 	adc.w	r3, r3, r9
 8001fe0:	f04f 0000 	mov.w	r0, #0
 8001fe4:	f04f 0100 	mov.w	r1, #0
 8001fe8:	0259      	lsls	r1, r3, #9
 8001fea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001fee:	0250      	lsls	r0, r2, #9
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f7fe f946 	bl	8000290 <__aeabi_uldivmod>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4613      	mov	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e04a      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200e:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	099b      	lsrs	r3, r3, #6
 8002014:	461a      	mov	r2, r3
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	ea02 0400 	and.w	r4, r2, r0
 8002026:	ea03 0501 	and.w	r5, r3, r1
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	014b      	lsls	r3, r1, #5
 8002038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800203c:	0142      	lsls	r2, r0, #5
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	1b00      	subs	r0, r0, r4
 8002044:	eb61 0105 	sbc.w	r1, r1, r5
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	018b      	lsls	r3, r1, #6
 8002052:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002056:	0182      	lsls	r2, r0, #6
 8002058:	1a12      	subs	r2, r2, r0
 800205a:	eb63 0301 	sbc.w	r3, r3, r1
 800205e:	f04f 0000 	mov.w	r0, #0
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	00d9      	lsls	r1, r3, #3
 8002068:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800206c:	00d0      	lsls	r0, r2, #3
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	1912      	adds	r2, r2, r4
 8002074:	eb45 0303 	adc.w	r3, r5, r3
 8002078:	f04f 0000 	mov.w	r0, #0
 800207c:	f04f 0100 	mov.w	r1, #0
 8002080:	0299      	lsls	r1, r3, #10
 8002082:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002086:	0290      	lsls	r0, r2, #10
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	f7fe f8fa 	bl	8000290 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4613      	mov	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	3301      	adds	r3, #1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	60bb      	str	r3, [r7, #8]
      break;
 80020be:	e002      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020c2:	60bb      	str	r3, [r7, #8]
      break;
 80020c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c6:	68bb      	ldr	r3, [r7, #8]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	00f42400 	.word	0x00f42400
 80020dc:	007a1200 	.word	0x007a1200

080020e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020fc:	f7ff fff0 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0a9b      	lsrs	r3, r3, #10
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4903      	ldr	r1, [pc, #12]	; (800211c <HAL_RCC_GetPCLK1Freq+0x24>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	0800402c 	.word	0x0800402c

08002120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002124:	f7ff ffdc 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0b5b      	lsrs	r3, r3, #13
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4903      	ldr	r1, [pc, #12]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	0800402c 	.word	0x0800402c

08002148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e01d      	b.n	8002196 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe feb8 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3304      	adds	r3, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f000 f95e 	bl	8002448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b06      	cmp	r3, #6
 80021c6:	d007      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d122      	bne.n	8002242 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d11b      	bne.n	8002242 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f06f 0202 	mvn.w	r2, #2
 8002212:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8ee 	bl	800240a <HAL_TIM_IC_CaptureCallback>
 800222e:	e005      	b.n	800223c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f8e0 	bl	80023f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8f1 	bl	800241e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b04      	cmp	r3, #4
 800224e:	d122      	bne.n	8002296 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b04      	cmp	r3, #4
 800225c:	d11b      	bne.n	8002296 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f06f 0204 	mvn.w	r2, #4
 8002266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f8c4 	bl	800240a <HAL_TIM_IC_CaptureCallback>
 8002282:	e005      	b.n	8002290 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f8b6 	bl	80023f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8c7 	bl	800241e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d122      	bne.n	80022ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11b      	bne.n	80022ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f06f 0208 	mvn.w	r2, #8
 80022ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2204      	movs	r2, #4
 80022c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f89a 	bl	800240a <HAL_TIM_IC_CaptureCallback>
 80022d6:	e005      	b.n	80022e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f88c 	bl	80023f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f89d 	bl	800241e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d122      	bne.n	800233e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b10      	cmp	r3, #16
 8002304:	d11b      	bne.n	800233e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f06f 0210 	mvn.w	r2, #16
 800230e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2208      	movs	r2, #8
 8002314:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f870 	bl	800240a <HAL_TIM_IC_CaptureCallback>
 800232a:	e005      	b.n	8002338 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f862 	bl	80023f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f873 	bl	800241e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d10e      	bne.n	800236a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f06f 0201 	mvn.w	r2, #1
 8002362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe fd71 	bl	8000e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002374:	2b80      	cmp	r3, #128	; 0x80
 8002376:	d10e      	bne.n	8002396 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d107      	bne.n	8002396 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800238e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f8e3 	bl	800255c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d10e      	bne.n	80023c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d107      	bne.n	80023c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f838 	bl	8002432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	d10e      	bne.n	80023ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d107      	bne.n	80023ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f06f 0220 	mvn.w	r2, #32
 80023e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f8ad 	bl	8002548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a34      	ldr	r2, [pc, #208]	; (800252c <TIM_Base_SetConfig+0xe4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00f      	beq.n	8002480 <TIM_Base_SetConfig+0x38>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d00b      	beq.n	8002480 <TIM_Base_SetConfig+0x38>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a31      	ldr	r2, [pc, #196]	; (8002530 <TIM_Base_SetConfig+0xe8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <TIM_Base_SetConfig+0x38>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a30      	ldr	r2, [pc, #192]	; (8002534 <TIM_Base_SetConfig+0xec>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <TIM_Base_SetConfig+0x38>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a2f      	ldr	r2, [pc, #188]	; (8002538 <TIM_Base_SetConfig+0xf0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d108      	bne.n	8002492 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <TIM_Base_SetConfig+0xe4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01b      	beq.n	80024d2 <TIM_Base_SetConfig+0x8a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d017      	beq.n	80024d2 <TIM_Base_SetConfig+0x8a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a22      	ldr	r2, [pc, #136]	; (8002530 <TIM_Base_SetConfig+0xe8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <TIM_Base_SetConfig+0x8a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a21      	ldr	r2, [pc, #132]	; (8002534 <TIM_Base_SetConfig+0xec>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00f      	beq.n	80024d2 <TIM_Base_SetConfig+0x8a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a20      	ldr	r2, [pc, #128]	; (8002538 <TIM_Base_SetConfig+0xf0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <TIM_Base_SetConfig+0x8a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a1f      	ldr	r2, [pc, #124]	; (800253c <TIM_Base_SetConfig+0xf4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <TIM_Base_SetConfig+0x8a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <TIM_Base_SetConfig+0xf8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d003      	beq.n	80024d2 <TIM_Base_SetConfig+0x8a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <TIM_Base_SetConfig+0xfc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d108      	bne.n	80024e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <TIM_Base_SetConfig+0xe4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d103      	bne.n	8002518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	615a      	str	r2, [r3, #20]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800
 8002538:	40000c00 	.word	0x40000c00
 800253c:	40014000 	.word	0x40014000
 8002540:	40014400 	.word	0x40014400
 8002544:	40014800 	.word	0x40014800

08002548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e03f      	b.n	8002602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fccc 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	; 0x24
 80025a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fc3d 	bl	8002e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b088      	sub	sp, #32
 800260e:	af02      	add	r7, sp, #8
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	f040 8083 	bne.w	8002732 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Transmit+0x2e>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e07b      	b.n	8002734 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_UART_Transmit+0x40>
 8002646:	2302      	movs	r3, #2
 8002648:	e074      	b.n	8002734 <HAL_UART_Transmit+0x12a>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2221      	movs	r2, #33	; 0x21
 800265c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002660:	f7fe fdd2 	bl	8001208 <HAL_GetTick>
 8002664:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	88fa      	ldrh	r2, [r7, #6]
 800266a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800267a:	e042      	b.n	8002702 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d122      	bne.n	80026da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2200      	movs	r2, #0
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fa5c 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e042      	b.n	8002734 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3302      	adds	r3, #2
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	e017      	b.n	8002702 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	e013      	b.n	8002702 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa39 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e01f      	b.n	8002734 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	60ba      	str	r2, [r7, #8]
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1b7      	bne.n	800267c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2200      	movs	r2, #0
 8002714:	2140      	movs	r1, #64	; 0x40
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fa20 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e006      	b.n	8002734 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b20      	cmp	r3, #32
 800275a:	f040 8090 	bne.w	800287e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_UART_Receive+0x2e>
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e088      	b.n	8002880 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_UART_Receive+0x40>
 8002778:	2302      	movs	r3, #2
 800277a:	e081      	b.n	8002880 <HAL_UART_Receive+0x144>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2222      	movs	r2, #34	; 0x22
 800278e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002792:	f7fe fd39 	bl	8001208 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	88fa      	ldrh	r2, [r7, #6]
 80027a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027ac:	e05c      	b.n	8002868 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c4:	d12b      	bne.n	800281e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2120      	movs	r1, #32
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f9c3 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e04f      	b.n	8002880 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10c      	bne.n	8002806 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3302      	adds	r3, #2
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	e030      	b.n	8002868 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	b29b      	uxth	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	b29a      	uxth	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3301      	adds	r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	e024      	b.n	8002868 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	2120      	movs	r1, #32
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f997 	bl	8002b5c <UART_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e023      	b.n	8002880 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	60ba      	str	r2, [r7, #8]
 800284c:	b2ca      	uxtb	r2, r1
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e00a      	b.n	8002868 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1c59      	adds	r1, r3, #1
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d19d      	bne.n	80027ae <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d140      	bne.n	8002924 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_UART_Receive_IT+0x26>
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e039      	b.n	8002926 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_UART_Receive_IT+0x38>
 80028bc:	2302      	movs	r3, #2
 80028be:	e032      	b.n	8002926 <HAL_UART_Receive_IT+0x9e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2222      	movs	r2, #34	; 0x22
 80028e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0220 	orr.w	r2, r2, #32
 800291e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002924:	2302      	movs	r3, #2
  }
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_UART_IRQHandler+0x52>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f9d6 	bl	8002d30 <UART_Receive_IT>
      return;
 8002984:	e0d0      	b.n	8002b28 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80b0 	beq.w	8002aee <HAL_UART_IRQHandler+0x1ba>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_UART_IRQHandler+0x70>
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80a5 	beq.w	8002aee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_UART_IRQHandler+0x90>
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_UART_IRQHandler+0xb0>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	f043 0202 	orr.w	r2, r3, #2
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_UART_IRQHandler+0xd0>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	f043 0204 	orr.w	r2, r3, #4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00f      	beq.n	8002a2e <HAL_UART_IRQHandler+0xfa>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <HAL_UART_IRQHandler+0xee>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	f043 0208 	orr.w	r2, r3, #8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d077      	beq.n	8002b26 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <HAL_UART_IRQHandler+0x11c>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f970 	bl	8002d30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b40      	cmp	r3, #64	; 0x40
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_UART_IRQHandler+0x144>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d031      	beq.n	8002adc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8b9 	bl	8002bf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d123      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <HAL_UART_IRQHandler+0x1fc>)
 8002aaa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fcea 	bl	800148a <HAL_DMA_Abort_IT>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d016      	beq.n	8002aea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aca:	e00e      	b.n	8002aea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f83b 	bl	8002b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad2:	e00a      	b.n	8002aea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f837 	bl	8002b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ada:	e006      	b.n	8002aea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f833 	bl	8002b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002ae8:	e01d      	b.n	8002b26 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aea:	bf00      	nop
    return;
 8002aec:	e01b      	b.n	8002b26 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1d6>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8a6 	bl	8002c54 <UART_Transmit_IT>
    return;
 8002b08:	e00e      	b.n	8002b28 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <HAL_UART_IRQHandler+0x1f4>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8ee 	bl	8002d00 <UART_EndTransmit_IT>
    return;
 8002b24:	e000      	b.n	8002b28 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002b26:	bf00      	nop
  }
}
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	08002c2d 	.word	0x08002c2d

08002b34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6c:	e02c      	b.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d028      	beq.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b7c:	f7fe fb44 	bl	8001208 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d21d      	bcs.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e00f      	b.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d0c3      	beq.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff ff7e 	bl	8002b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b21      	cmp	r3, #33	; 0x21
 8002c66:	d144      	bne.n	8002cf2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c70:	d11a      	bne.n	8002ca8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c86:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	1c9a      	adds	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]
 8002c9a:	e00e      	b.n	8002cba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]
 8002ca6:	e008      	b.n	8002cba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	1c59      	adds	r1, r3, #1
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6211      	str	r1, [r2, #32]
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10f      	bne.n	8002cee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff07 	bl	8002b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b22      	cmp	r3, #34	; 0x22
 8002d42:	d171      	bne.n	8002e28 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d123      	bne.n	8002d96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10e      	bne.n	8002d7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	1c9a      	adds	r2, r3, #2
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
 8002d78:	e029      	b.n	8002dce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
 8002d94:	e01b      	b.n	8002dce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6858      	ldr	r0, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	1c59      	adds	r1, r3, #1
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6291      	str	r1, [r2, #40]	; 0x28
 8002dae:	b2c2      	uxtb	r2, r0
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e00c      	b.n	8002dce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	1c58      	adds	r0, r3, #1
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	6288      	str	r0, [r1, #40]	; 0x28
 8002dc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d120      	bne.n	8002e24 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0220 	bic.w	r2, r2, #32
 8002df0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fffe 	bl	8000e1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e002      	b.n	8002e2a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e38:	b0bd      	sub	sp, #244	; 0xf4
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	ea40 0301 	orr.w	r3, r0, r1
 8002e5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e8c:	f021 010c 	bic.w	r1, r1, #12
 8002e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eae:	6999      	ldr	r1, [r3, #24]
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	ea40 0301 	orr.w	r3, r0, r1
 8002eba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	f040 81a5 	bne.w	8003214 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4bcd      	ldr	r3, [pc, #820]	; (8003208 <UART_SetConfig+0x3d4>)
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d006      	beq.n	8002ee4 <UART_SetConfig+0xb0>
 8002ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4bcb      	ldr	r3, [pc, #812]	; (800320c <UART_SetConfig+0x3d8>)
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	f040 80cb 	bne.w	800307a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee4:	f7ff f91c 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8002ee8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ef0:	461c      	mov	r4, r3
 8002ef2:	f04f 0500 	mov.w	r5, #0
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	462b      	mov	r3, r5
 8002efa:	1891      	adds	r1, r2, r2
 8002efc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002f00:	415b      	adcs	r3, r3
 8002f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f0a:	1912      	adds	r2, r2, r4
 8002f0c:	eb45 0303 	adc.w	r3, r5, r3
 8002f10:	f04f 0000 	mov.w	r0, #0
 8002f14:	f04f 0100 	mov.w	r1, #0
 8002f18:	00d9      	lsls	r1, r3, #3
 8002f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f1e:	00d0      	lsls	r0, r2, #3
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	1911      	adds	r1, r2, r4
 8002f26:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002f2a:	416b      	adcs	r3, r5
 8002f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	1891      	adds	r1, r2, r2
 8002f3e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002f42:	415b      	adcs	r3, r3
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f48:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002f4c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002f50:	f7fd f99e 	bl	8000290 <__aeabi_uldivmod>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4bad      	ldr	r3, [pc, #692]	; (8003210 <UART_SetConfig+0x3dc>)
 8002f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	011e      	lsls	r6, r3, #4
 8002f62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f66:	461c      	mov	r4, r3
 8002f68:	f04f 0500 	mov.w	r5, #0
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	462b      	mov	r3, r5
 8002f70:	1891      	adds	r1, r2, r2
 8002f72:	67b9      	str	r1, [r7, #120]	; 0x78
 8002f74:	415b      	adcs	r3, r3
 8002f76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f78:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002f7c:	1912      	adds	r2, r2, r4
 8002f7e:	eb45 0303 	adc.w	r3, r5, r3
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	00d9      	lsls	r1, r3, #3
 8002f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f90:	00d0      	lsls	r0, r2, #3
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	1911      	adds	r1, r2, r4
 8002f98:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002f9c:	416b      	adcs	r3, r5
 8002f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	1891      	adds	r1, r2, r2
 8002fb0:	6739      	str	r1, [r7, #112]	; 0x70
 8002fb2:	415b      	adcs	r3, r3
 8002fb4:	677b      	str	r3, [r7, #116]	; 0x74
 8002fb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002fbe:	f7fd f967 	bl	8000290 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4b92      	ldr	r3, [pc, #584]	; (8003210 <UART_SetConfig+0x3dc>)
 8002fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	2164      	movs	r1, #100	; 0x64
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	3332      	adds	r3, #50	; 0x32
 8002fda:	4a8d      	ldr	r2, [pc, #564]	; (8003210 <UART_SetConfig+0x3dc>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fe8:	441e      	add	r6, r3
 8002fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	1894      	adds	r4, r2, r2
 8002ffa:	66bc      	str	r4, [r7, #104]	; 0x68
 8002ffc:	415b      	adcs	r3, r3
 8002ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003000:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003004:	1812      	adds	r2, r2, r0
 8003006:	eb41 0303 	adc.w	r3, r1, r3
 800300a:	f04f 0400 	mov.w	r4, #0
 800300e:	f04f 0500 	mov.w	r5, #0
 8003012:	00dd      	lsls	r5, r3, #3
 8003014:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003018:	00d4      	lsls	r4, r2, #3
 800301a:	4622      	mov	r2, r4
 800301c:	462b      	mov	r3, r5
 800301e:	1814      	adds	r4, r2, r0
 8003020:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003024:	414b      	adcs	r3, r1
 8003026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	461a      	mov	r2, r3
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	1891      	adds	r1, r2, r2
 8003038:	6639      	str	r1, [r7, #96]	; 0x60
 800303a:	415b      	adcs	r3, r3
 800303c:	667b      	str	r3, [r7, #100]	; 0x64
 800303e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003046:	f7fd f923 	bl	8000290 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4b70      	ldr	r3, [pc, #448]	; (8003210 <UART_SetConfig+0x3dc>)
 8003050:	fba3 1302 	umull	r1, r3, r3, r2
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	2164      	movs	r1, #100	; 0x64
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	3332      	adds	r3, #50	; 0x32
 8003062:	4a6b      	ldr	r2, [pc, #428]	; (8003210 <UART_SetConfig+0x3dc>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	f003 0207 	and.w	r2, r3, #7
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4432      	add	r2, r6
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	e26d      	b.n	8003556 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800307a:	f7ff f83d 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 800307e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003082:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003086:	461c      	mov	r4, r3
 8003088:	f04f 0500 	mov.w	r5, #0
 800308c:	4622      	mov	r2, r4
 800308e:	462b      	mov	r3, r5
 8003090:	1891      	adds	r1, r2, r2
 8003092:	65b9      	str	r1, [r7, #88]	; 0x58
 8003094:	415b      	adcs	r3, r3
 8003096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003098:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800309c:	1912      	adds	r2, r2, r4
 800309e:	eb45 0303 	adc.w	r3, r5, r3
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	00d9      	lsls	r1, r3, #3
 80030ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030b0:	00d0      	lsls	r0, r2, #3
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	1911      	adds	r1, r2, r4
 80030b8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80030bc:	416b      	adcs	r3, r5
 80030be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	461a      	mov	r2, r3
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	6539      	str	r1, [r7, #80]	; 0x50
 80030d2:	415b      	adcs	r3, r3
 80030d4:	657b      	str	r3, [r7, #84]	; 0x54
 80030d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030da:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80030de:	f7fd f8d7 	bl	8000290 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <UART_SetConfig+0x3dc>)
 80030e8:	fba3 2302 	umull	r2, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	011e      	lsls	r6, r3, #4
 80030f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030f4:	461c      	mov	r4, r3
 80030f6:	f04f 0500 	mov.w	r5, #0
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	64b9      	str	r1, [r7, #72]	; 0x48
 8003102:	415b      	adcs	r3, r3
 8003104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003106:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800310a:	1912      	adds	r2, r2, r4
 800310c:	eb45 0303 	adc.w	r3, r5, r3
 8003110:	f04f 0000 	mov.w	r0, #0
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	00d9      	lsls	r1, r3, #3
 800311a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800311e:	00d0      	lsls	r0, r2, #3
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	1911      	adds	r1, r2, r4
 8003126:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800312a:	416b      	adcs	r3, r5
 800312c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	1891      	adds	r1, r2, r2
 800313e:	6439      	str	r1, [r7, #64]	; 0x40
 8003140:	415b      	adcs	r3, r3
 8003142:	647b      	str	r3, [r7, #68]	; 0x44
 8003144:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003148:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800314c:	f7fd f8a0 	bl	8000290 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <UART_SetConfig+0x3dc>)
 8003156:	fba3 1302 	umull	r1, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2164      	movs	r1, #100	; 0x64
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a29      	ldr	r2, [pc, #164]	; (8003210 <UART_SetConfig+0x3dc>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003176:	441e      	add	r6, r3
 8003178:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800317c:	4618      	mov	r0, r3
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	1894      	adds	r4, r2, r2
 8003188:	63bc      	str	r4, [r7, #56]	; 0x38
 800318a:	415b      	adcs	r3, r3
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003192:	1812      	adds	r2, r2, r0
 8003194:	eb41 0303 	adc.w	r3, r1, r3
 8003198:	f04f 0400 	mov.w	r4, #0
 800319c:	f04f 0500 	mov.w	r5, #0
 80031a0:	00dd      	lsls	r5, r3, #3
 80031a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031a6:	00d4      	lsls	r4, r2, #3
 80031a8:	4622      	mov	r2, r4
 80031aa:	462b      	mov	r3, r5
 80031ac:	1814      	adds	r4, r2, r0
 80031ae:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80031b2:	414b      	adcs	r3, r1
 80031b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	461a      	mov	r2, r3
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	1891      	adds	r1, r2, r2
 80031c6:	6339      	str	r1, [r7, #48]	; 0x30
 80031c8:	415b      	adcs	r3, r3
 80031ca:	637b      	str	r3, [r7, #52]	; 0x34
 80031cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031d0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031d4:	f7fd f85c 	bl	8000290 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <UART_SetConfig+0x3dc>)
 80031de:	fba3 1302 	umull	r1, r3, r3, r2
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2164      	movs	r1, #100	; 0x64
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	3332      	adds	r3, #50	; 0x32
 80031f0:	4a07      	ldr	r2, [pc, #28]	; (8003210 <UART_SetConfig+0x3dc>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	f003 0207 	and.w	r2, r3, #7
 80031fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4432      	add	r2, r6
 8003204:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003206:	e1a6      	b.n	8003556 <UART_SetConfig+0x722>
 8003208:	40011000 	.word	0x40011000
 800320c:	40011400 	.word	0x40011400
 8003210:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4bd1      	ldr	r3, [pc, #836]	; (8003560 <UART_SetConfig+0x72c>)
 800321c:	429a      	cmp	r2, r3
 800321e:	d006      	beq.n	800322e <UART_SetConfig+0x3fa>
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4bcf      	ldr	r3, [pc, #828]	; (8003564 <UART_SetConfig+0x730>)
 8003228:	429a      	cmp	r2, r3
 800322a:	f040 80ca 	bne.w	80033c2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800322e:	f7fe ff77 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8003232:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800323a:	461c      	mov	r4, r3
 800323c:	f04f 0500 	mov.w	r5, #0
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	1891      	adds	r1, r2, r2
 8003246:	62b9      	str	r1, [r7, #40]	; 0x28
 8003248:	415b      	adcs	r3, r3
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003250:	1912      	adds	r2, r2, r4
 8003252:	eb45 0303 	adc.w	r3, r5, r3
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	00d9      	lsls	r1, r3, #3
 8003260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003264:	00d0      	lsls	r0, r2, #3
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	eb12 0a04 	adds.w	sl, r2, r4
 800326e:	eb43 0b05 	adc.w	fp, r3, r5
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	008b      	lsls	r3, r1, #2
 8003288:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800328c:	0082      	lsls	r2, r0, #2
 800328e:	4650      	mov	r0, sl
 8003290:	4659      	mov	r1, fp
 8003292:	f7fc fffd 	bl	8000290 <__aeabi_uldivmod>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4bb3      	ldr	r3, [pc, #716]	; (8003568 <UART_SetConfig+0x734>)
 800329c:	fba3 2302 	umull	r2, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	011e      	lsls	r6, r3, #4
 80032a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032a8:	4618      	mov	r0, r3
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	1894      	adds	r4, r2, r2
 80032b4:	623c      	str	r4, [r7, #32]
 80032b6:	415b      	adcs	r3, r3
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032be:	1812      	adds	r2, r2, r0
 80032c0:	eb41 0303 	adc.w	r3, r1, r3
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	f04f 0500 	mov.w	r5, #0
 80032cc:	00dd      	lsls	r5, r3, #3
 80032ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032d2:	00d4      	lsls	r4, r2, #3
 80032d4:	4622      	mov	r2, r4
 80032d6:	462b      	mov	r3, r5
 80032d8:	1814      	adds	r4, r2, r0
 80032da:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80032de:	414b      	adcs	r3, r1
 80032e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	008b      	lsls	r3, r1, #2
 80032fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032fe:	0082      	lsls	r2, r0, #2
 8003300:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003304:	f7fc ffc4 	bl	8000290 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4b96      	ldr	r3, [pc, #600]	; (8003568 <UART_SetConfig+0x734>)
 800330e:	fba3 1302 	umull	r1, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2164      	movs	r1, #100	; 0x64
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	; 0x32
 8003320:	4a91      	ldr	r2, [pc, #580]	; (8003568 <UART_SetConfig+0x734>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	441e      	add	r6, r3
 800332e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003332:	4618      	mov	r0, r3
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	1894      	adds	r4, r2, r2
 800333e:	61bc      	str	r4, [r7, #24]
 8003340:	415b      	adcs	r3, r3
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003348:	1812      	adds	r2, r2, r0
 800334a:	eb41 0303 	adc.w	r3, r1, r3
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	f04f 0500 	mov.w	r5, #0
 8003356:	00dd      	lsls	r5, r3, #3
 8003358:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800335c:	00d4      	lsls	r4, r2, #3
 800335e:	4622      	mov	r2, r4
 8003360:	462b      	mov	r3, r5
 8003362:	1814      	adds	r4, r2, r0
 8003364:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003368:	414b      	adcs	r3, r1
 800336a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	008b      	lsls	r3, r1, #2
 8003384:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003388:	0082      	lsls	r2, r0, #2
 800338a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800338e:	f7fc ff7f 	bl	8000290 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4b74      	ldr	r3, [pc, #464]	; (8003568 <UART_SetConfig+0x734>)
 8003398:	fba3 1302 	umull	r1, r3, r3, r2
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	2164      	movs	r1, #100	; 0x64
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	3332      	adds	r3, #50	; 0x32
 80033aa:	4a6f      	ldr	r2, [pc, #444]	; (8003568 <UART_SetConfig+0x734>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4432      	add	r2, r6
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e0c9      	b.n	8003556 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80033c2:	f7fe fe99 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 80033c6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033ce:	461c      	mov	r4, r3
 80033d0:	f04f 0500 	mov.w	r5, #0
 80033d4:	4622      	mov	r2, r4
 80033d6:	462b      	mov	r3, r5
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	6139      	str	r1, [r7, #16]
 80033dc:	415b      	adcs	r3, r3
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033e4:	1912      	adds	r2, r2, r4
 80033e6:	eb45 0303 	adc.w	r3, r5, r3
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	00d9      	lsls	r1, r3, #3
 80033f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033f8:	00d0      	lsls	r0, r2, #3
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	eb12 0804 	adds.w	r8, r2, r4
 8003402:	eb43 0905 	adc.w	r9, r3, r5
 8003406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	008b      	lsls	r3, r1, #2
 800341c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003420:	0082      	lsls	r2, r0, #2
 8003422:	4640      	mov	r0, r8
 8003424:	4649      	mov	r1, r9
 8003426:	f7fc ff33 	bl	8000290 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <UART_SetConfig+0x734>)
 8003430:	fba3 2302 	umull	r2, r3, r3, r2
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	011e      	lsls	r6, r3, #4
 8003438:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800343c:	4618      	mov	r0, r3
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	1894      	adds	r4, r2, r2
 8003448:	60bc      	str	r4, [r7, #8]
 800344a:	415b      	adcs	r3, r3
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003452:	1812      	adds	r2, r2, r0
 8003454:	eb41 0303 	adc.w	r3, r1, r3
 8003458:	f04f 0400 	mov.w	r4, #0
 800345c:	f04f 0500 	mov.w	r5, #0
 8003460:	00dd      	lsls	r5, r3, #3
 8003462:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003466:	00d4      	lsls	r4, r2, #3
 8003468:	4622      	mov	r2, r4
 800346a:	462b      	mov	r3, r5
 800346c:	1814      	adds	r4, r2, r0
 800346e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003472:	414b      	adcs	r3, r1
 8003474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4618      	mov	r0, r3
 8003480:	f04f 0100 	mov.w	r1, #0
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	008b      	lsls	r3, r1, #2
 800348e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003492:	0082      	lsls	r2, r0, #2
 8003494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003498:	f7fc fefa 	bl	8000290 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <UART_SetConfig+0x734>)
 80034a2:	fba3 1302 	umull	r1, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2164      	movs	r1, #100	; 0x64
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	3332      	adds	r3, #50	; 0x32
 80034b4:	4a2c      	ldr	r2, [pc, #176]	; (8003568 <UART_SetConfig+0x734>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c0:	441e      	add	r6, r3
 80034c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034c6:	4618      	mov	r0, r3
 80034c8:	f04f 0100 	mov.w	r1, #0
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	1894      	adds	r4, r2, r2
 80034d2:	603c      	str	r4, [r7, #0]
 80034d4:	415b      	adcs	r3, r3
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034dc:	1812      	adds	r2, r2, r0
 80034de:	eb41 0303 	adc.w	r3, r1, r3
 80034e2:	f04f 0400 	mov.w	r4, #0
 80034e6:	f04f 0500 	mov.w	r5, #0
 80034ea:	00dd      	lsls	r5, r3, #3
 80034ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034f0:	00d4      	lsls	r4, r2, #3
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	1814      	adds	r4, r2, r0
 80034f8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80034fc:	414b      	adcs	r3, r1
 80034fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	008b      	lsls	r3, r1, #2
 8003518:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800351c:	0082      	lsls	r2, r0, #2
 800351e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003522:	f7fc feb5 	bl	8000290 <__aeabi_uldivmod>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <UART_SetConfig+0x734>)
 800352c:	fba3 1302 	umull	r1, r3, r3, r2
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	2164      	movs	r1, #100	; 0x64
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	3332      	adds	r3, #50	; 0x32
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <UART_SetConfig+0x734>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	f003 020f 	and.w	r2, r3, #15
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4432      	add	r2, r6
 8003552:	609a      	str	r2, [r3, #8]
}
 8003554:	e7ff      	b.n	8003556 <UART_SetConfig+0x722>
 8003556:	bf00      	nop
 8003558:	37f4      	adds	r7, #244	; 0xf4
 800355a:	46bd      	mov	sp, r7
 800355c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003560:	40011000 	.word	0x40011000
 8003564:	40011400 	.word	0x40011400
 8003568:	51eb851f 	.word	0x51eb851f

0800356c <__errno>:
 800356c:	4b01      	ldr	r3, [pc, #4]	; (8003574 <__errno+0x8>)
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000014 	.word	0x20000014

08003578 <__libc_init_array>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	4d0d      	ldr	r5, [pc, #52]	; (80035b0 <__libc_init_array+0x38>)
 800357c:	4c0d      	ldr	r4, [pc, #52]	; (80035b4 <__libc_init_array+0x3c>)
 800357e:	1b64      	subs	r4, r4, r5
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	2600      	movs	r6, #0
 8003584:	42a6      	cmp	r6, r4
 8003586:	d109      	bne.n	800359c <__libc_init_array+0x24>
 8003588:	4d0b      	ldr	r5, [pc, #44]	; (80035b8 <__libc_init_array+0x40>)
 800358a:	4c0c      	ldr	r4, [pc, #48]	; (80035bc <__libc_init_array+0x44>)
 800358c:	f000 fc4e 	bl	8003e2c <_init>
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	2600      	movs	r6, #0
 8003596:	42a6      	cmp	r6, r4
 8003598:	d105      	bne.n	80035a6 <__libc_init_array+0x2e>
 800359a:	bd70      	pop	{r4, r5, r6, pc}
 800359c:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a0:	4798      	blx	r3
 80035a2:	3601      	adds	r6, #1
 80035a4:	e7ee      	b.n	8003584 <__libc_init_array+0xc>
 80035a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035aa:	4798      	blx	r3
 80035ac:	3601      	adds	r6, #1
 80035ae:	e7f2      	b.n	8003596 <__libc_init_array+0x1e>
 80035b0:	08004070 	.word	0x08004070
 80035b4:	08004070 	.word	0x08004070
 80035b8:	08004070 	.word	0x08004070
 80035bc:	08004074 	.word	0x08004074

080035c0 <memcpy>:
 80035c0:	440a      	add	r2, r1
 80035c2:	4291      	cmp	r1, r2
 80035c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035c8:	d100      	bne.n	80035cc <memcpy+0xc>
 80035ca:	4770      	bx	lr
 80035cc:	b510      	push	{r4, lr}
 80035ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035d6:	4291      	cmp	r1, r2
 80035d8:	d1f9      	bne.n	80035ce <memcpy+0xe>
 80035da:	bd10      	pop	{r4, pc}

080035dc <memset>:
 80035dc:	4402      	add	r2, r0
 80035de:	4603      	mov	r3, r0
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <siprintf>:
 80035ec:	b40e      	push	{r1, r2, r3}
 80035ee:	b500      	push	{lr}
 80035f0:	b09c      	sub	sp, #112	; 0x70
 80035f2:	ab1d      	add	r3, sp, #116	; 0x74
 80035f4:	9002      	str	r0, [sp, #8]
 80035f6:	9006      	str	r0, [sp, #24]
 80035f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035fc:	4809      	ldr	r0, [pc, #36]	; (8003624 <siprintf+0x38>)
 80035fe:	9107      	str	r1, [sp, #28]
 8003600:	9104      	str	r1, [sp, #16]
 8003602:	4909      	ldr	r1, [pc, #36]	; (8003628 <siprintf+0x3c>)
 8003604:	f853 2b04 	ldr.w	r2, [r3], #4
 8003608:	9105      	str	r1, [sp, #20]
 800360a:	6800      	ldr	r0, [r0, #0]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	a902      	add	r1, sp, #8
 8003610:	f000 f868 	bl	80036e4 <_svfiprintf_r>
 8003614:	9b02      	ldr	r3, [sp, #8]
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	b01c      	add	sp, #112	; 0x70
 800361c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003620:	b003      	add	sp, #12
 8003622:	4770      	bx	lr
 8003624:	20000014 	.word	0x20000014
 8003628:	ffff0208 	.word	0xffff0208

0800362c <__ssputs_r>:
 800362c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	688e      	ldr	r6, [r1, #8]
 8003632:	429e      	cmp	r6, r3
 8003634:	4682      	mov	sl, r0
 8003636:	460c      	mov	r4, r1
 8003638:	4690      	mov	r8, r2
 800363a:	461f      	mov	r7, r3
 800363c:	d838      	bhi.n	80036b0 <__ssputs_r+0x84>
 800363e:	898a      	ldrh	r2, [r1, #12]
 8003640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003644:	d032      	beq.n	80036ac <__ssputs_r+0x80>
 8003646:	6825      	ldr	r5, [r4, #0]
 8003648:	6909      	ldr	r1, [r1, #16]
 800364a:	eba5 0901 	sub.w	r9, r5, r1
 800364e:	6965      	ldr	r5, [r4, #20]
 8003650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003658:	3301      	adds	r3, #1
 800365a:	444b      	add	r3, r9
 800365c:	106d      	asrs	r5, r5, #1
 800365e:	429d      	cmp	r5, r3
 8003660:	bf38      	it	cc
 8003662:	461d      	movcc	r5, r3
 8003664:	0553      	lsls	r3, r2, #21
 8003666:	d531      	bpl.n	80036cc <__ssputs_r+0xa0>
 8003668:	4629      	mov	r1, r5
 800366a:	f000 fb39 	bl	8003ce0 <_malloc_r>
 800366e:	4606      	mov	r6, r0
 8003670:	b950      	cbnz	r0, 8003688 <__ssputs_r+0x5c>
 8003672:	230c      	movs	r3, #12
 8003674:	f8ca 3000 	str.w	r3, [sl]
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003688:	6921      	ldr	r1, [r4, #16]
 800368a:	464a      	mov	r2, r9
 800368c:	f7ff ff98 	bl	80035c0 <memcpy>
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	6126      	str	r6, [r4, #16]
 800369e:	6165      	str	r5, [r4, #20]
 80036a0:	444e      	add	r6, r9
 80036a2:	eba5 0509 	sub.w	r5, r5, r9
 80036a6:	6026      	str	r6, [r4, #0]
 80036a8:	60a5      	str	r5, [r4, #8]
 80036aa:	463e      	mov	r6, r7
 80036ac:	42be      	cmp	r6, r7
 80036ae:	d900      	bls.n	80036b2 <__ssputs_r+0x86>
 80036b0:	463e      	mov	r6, r7
 80036b2:	4632      	mov	r2, r6
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	4641      	mov	r1, r8
 80036b8:	f000 faa8 	bl	8003c0c <memmove>
 80036bc:	68a3      	ldr	r3, [r4, #8]
 80036be:	6822      	ldr	r2, [r4, #0]
 80036c0:	1b9b      	subs	r3, r3, r6
 80036c2:	4432      	add	r2, r6
 80036c4:	60a3      	str	r3, [r4, #8]
 80036c6:	6022      	str	r2, [r4, #0]
 80036c8:	2000      	movs	r0, #0
 80036ca:	e7db      	b.n	8003684 <__ssputs_r+0x58>
 80036cc:	462a      	mov	r2, r5
 80036ce:	f000 fb61 	bl	8003d94 <_realloc_r>
 80036d2:	4606      	mov	r6, r0
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d1e1      	bne.n	800369c <__ssputs_r+0x70>
 80036d8:	6921      	ldr	r1, [r4, #16]
 80036da:	4650      	mov	r0, sl
 80036dc:	f000 fab0 	bl	8003c40 <_free_r>
 80036e0:	e7c7      	b.n	8003672 <__ssputs_r+0x46>
	...

080036e4 <_svfiprintf_r>:
 80036e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e8:	4698      	mov	r8, r3
 80036ea:	898b      	ldrh	r3, [r1, #12]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	b09d      	sub	sp, #116	; 0x74
 80036f0:	4607      	mov	r7, r0
 80036f2:	460d      	mov	r5, r1
 80036f4:	4614      	mov	r4, r2
 80036f6:	d50e      	bpl.n	8003716 <_svfiprintf_r+0x32>
 80036f8:	690b      	ldr	r3, [r1, #16]
 80036fa:	b963      	cbnz	r3, 8003716 <_svfiprintf_r+0x32>
 80036fc:	2140      	movs	r1, #64	; 0x40
 80036fe:	f000 faef 	bl	8003ce0 <_malloc_r>
 8003702:	6028      	str	r0, [r5, #0]
 8003704:	6128      	str	r0, [r5, #16]
 8003706:	b920      	cbnz	r0, 8003712 <_svfiprintf_r+0x2e>
 8003708:	230c      	movs	r3, #12
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	e0d1      	b.n	80038b6 <_svfiprintf_r+0x1d2>
 8003712:	2340      	movs	r3, #64	; 0x40
 8003714:	616b      	str	r3, [r5, #20]
 8003716:	2300      	movs	r3, #0
 8003718:	9309      	str	r3, [sp, #36]	; 0x24
 800371a:	2320      	movs	r3, #32
 800371c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003720:	f8cd 800c 	str.w	r8, [sp, #12]
 8003724:	2330      	movs	r3, #48	; 0x30
 8003726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038d0 <_svfiprintf_r+0x1ec>
 800372a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800372e:	f04f 0901 	mov.w	r9, #1
 8003732:	4623      	mov	r3, r4
 8003734:	469a      	mov	sl, r3
 8003736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800373a:	b10a      	cbz	r2, 8003740 <_svfiprintf_r+0x5c>
 800373c:	2a25      	cmp	r2, #37	; 0x25
 800373e:	d1f9      	bne.n	8003734 <_svfiprintf_r+0x50>
 8003740:	ebba 0b04 	subs.w	fp, sl, r4
 8003744:	d00b      	beq.n	800375e <_svfiprintf_r+0x7a>
 8003746:	465b      	mov	r3, fp
 8003748:	4622      	mov	r2, r4
 800374a:	4629      	mov	r1, r5
 800374c:	4638      	mov	r0, r7
 800374e:	f7ff ff6d 	bl	800362c <__ssputs_r>
 8003752:	3001      	adds	r0, #1
 8003754:	f000 80aa 	beq.w	80038ac <_svfiprintf_r+0x1c8>
 8003758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800375a:	445a      	add	r2, fp
 800375c:	9209      	str	r2, [sp, #36]	; 0x24
 800375e:	f89a 3000 	ldrb.w	r3, [sl]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80a2 	beq.w	80038ac <_svfiprintf_r+0x1c8>
 8003768:	2300      	movs	r3, #0
 800376a:	f04f 32ff 	mov.w	r2, #4294967295
 800376e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003772:	f10a 0a01 	add.w	sl, sl, #1
 8003776:	9304      	str	r3, [sp, #16]
 8003778:	9307      	str	r3, [sp, #28]
 800377a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800377e:	931a      	str	r3, [sp, #104]	; 0x68
 8003780:	4654      	mov	r4, sl
 8003782:	2205      	movs	r2, #5
 8003784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003788:	4851      	ldr	r0, [pc, #324]	; (80038d0 <_svfiprintf_r+0x1ec>)
 800378a:	f7fc fd31 	bl	80001f0 <memchr>
 800378e:	9a04      	ldr	r2, [sp, #16]
 8003790:	b9d8      	cbnz	r0, 80037ca <_svfiprintf_r+0xe6>
 8003792:	06d0      	lsls	r0, r2, #27
 8003794:	bf44      	itt	mi
 8003796:	2320      	movmi	r3, #32
 8003798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800379c:	0711      	lsls	r1, r2, #28
 800379e:	bf44      	itt	mi
 80037a0:	232b      	movmi	r3, #43	; 0x2b
 80037a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a6:	f89a 3000 	ldrb.w	r3, [sl]
 80037aa:	2b2a      	cmp	r3, #42	; 0x2a
 80037ac:	d015      	beq.n	80037da <_svfiprintf_r+0xf6>
 80037ae:	9a07      	ldr	r2, [sp, #28]
 80037b0:	4654      	mov	r4, sl
 80037b2:	2000      	movs	r0, #0
 80037b4:	f04f 0c0a 	mov.w	ip, #10
 80037b8:	4621      	mov	r1, r4
 80037ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037be:	3b30      	subs	r3, #48	; 0x30
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	d94e      	bls.n	8003862 <_svfiprintf_r+0x17e>
 80037c4:	b1b0      	cbz	r0, 80037f4 <_svfiprintf_r+0x110>
 80037c6:	9207      	str	r2, [sp, #28]
 80037c8:	e014      	b.n	80037f4 <_svfiprintf_r+0x110>
 80037ca:	eba0 0308 	sub.w	r3, r0, r8
 80037ce:	fa09 f303 	lsl.w	r3, r9, r3
 80037d2:	4313      	orrs	r3, r2
 80037d4:	9304      	str	r3, [sp, #16]
 80037d6:	46a2      	mov	sl, r4
 80037d8:	e7d2      	b.n	8003780 <_svfiprintf_r+0x9c>
 80037da:	9b03      	ldr	r3, [sp, #12]
 80037dc:	1d19      	adds	r1, r3, #4
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	9103      	str	r1, [sp, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bfbb      	ittet	lt
 80037e6:	425b      	neglt	r3, r3
 80037e8:	f042 0202 	orrlt.w	r2, r2, #2
 80037ec:	9307      	strge	r3, [sp, #28]
 80037ee:	9307      	strlt	r3, [sp, #28]
 80037f0:	bfb8      	it	lt
 80037f2:	9204      	strlt	r2, [sp, #16]
 80037f4:	7823      	ldrb	r3, [r4, #0]
 80037f6:	2b2e      	cmp	r3, #46	; 0x2e
 80037f8:	d10c      	bne.n	8003814 <_svfiprintf_r+0x130>
 80037fa:	7863      	ldrb	r3, [r4, #1]
 80037fc:	2b2a      	cmp	r3, #42	; 0x2a
 80037fe:	d135      	bne.n	800386c <_svfiprintf_r+0x188>
 8003800:	9b03      	ldr	r3, [sp, #12]
 8003802:	1d1a      	adds	r2, r3, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	9203      	str	r2, [sp, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	bfb8      	it	lt
 800380c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003810:	3402      	adds	r4, #2
 8003812:	9305      	str	r3, [sp, #20]
 8003814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038e0 <_svfiprintf_r+0x1fc>
 8003818:	7821      	ldrb	r1, [r4, #0]
 800381a:	2203      	movs	r2, #3
 800381c:	4650      	mov	r0, sl
 800381e:	f7fc fce7 	bl	80001f0 <memchr>
 8003822:	b140      	cbz	r0, 8003836 <_svfiprintf_r+0x152>
 8003824:	2340      	movs	r3, #64	; 0x40
 8003826:	eba0 000a 	sub.w	r0, r0, sl
 800382a:	fa03 f000 	lsl.w	r0, r3, r0
 800382e:	9b04      	ldr	r3, [sp, #16]
 8003830:	4303      	orrs	r3, r0
 8003832:	3401      	adds	r4, #1
 8003834:	9304      	str	r3, [sp, #16]
 8003836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800383a:	4826      	ldr	r0, [pc, #152]	; (80038d4 <_svfiprintf_r+0x1f0>)
 800383c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003840:	2206      	movs	r2, #6
 8003842:	f7fc fcd5 	bl	80001f0 <memchr>
 8003846:	2800      	cmp	r0, #0
 8003848:	d038      	beq.n	80038bc <_svfiprintf_r+0x1d8>
 800384a:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <_svfiprintf_r+0x1f4>)
 800384c:	bb1b      	cbnz	r3, 8003896 <_svfiprintf_r+0x1b2>
 800384e:	9b03      	ldr	r3, [sp, #12]
 8003850:	3307      	adds	r3, #7
 8003852:	f023 0307 	bic.w	r3, r3, #7
 8003856:	3308      	adds	r3, #8
 8003858:	9303      	str	r3, [sp, #12]
 800385a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800385c:	4433      	add	r3, r6
 800385e:	9309      	str	r3, [sp, #36]	; 0x24
 8003860:	e767      	b.n	8003732 <_svfiprintf_r+0x4e>
 8003862:	fb0c 3202 	mla	r2, ip, r2, r3
 8003866:	460c      	mov	r4, r1
 8003868:	2001      	movs	r0, #1
 800386a:	e7a5      	b.n	80037b8 <_svfiprintf_r+0xd4>
 800386c:	2300      	movs	r3, #0
 800386e:	3401      	adds	r4, #1
 8003870:	9305      	str	r3, [sp, #20]
 8003872:	4619      	mov	r1, r3
 8003874:	f04f 0c0a 	mov.w	ip, #10
 8003878:	4620      	mov	r0, r4
 800387a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800387e:	3a30      	subs	r2, #48	; 0x30
 8003880:	2a09      	cmp	r2, #9
 8003882:	d903      	bls.n	800388c <_svfiprintf_r+0x1a8>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0c5      	beq.n	8003814 <_svfiprintf_r+0x130>
 8003888:	9105      	str	r1, [sp, #20]
 800388a:	e7c3      	b.n	8003814 <_svfiprintf_r+0x130>
 800388c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003890:	4604      	mov	r4, r0
 8003892:	2301      	movs	r3, #1
 8003894:	e7f0      	b.n	8003878 <_svfiprintf_r+0x194>
 8003896:	ab03      	add	r3, sp, #12
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	462a      	mov	r2, r5
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <_svfiprintf_r+0x1f8>)
 800389e:	a904      	add	r1, sp, #16
 80038a0:	4638      	mov	r0, r7
 80038a2:	f3af 8000 	nop.w
 80038a6:	1c42      	adds	r2, r0, #1
 80038a8:	4606      	mov	r6, r0
 80038aa:	d1d6      	bne.n	800385a <_svfiprintf_r+0x176>
 80038ac:	89ab      	ldrh	r3, [r5, #12]
 80038ae:	065b      	lsls	r3, r3, #25
 80038b0:	f53f af2c 	bmi.w	800370c <_svfiprintf_r+0x28>
 80038b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b6:	b01d      	add	sp, #116	; 0x74
 80038b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038bc:	ab03      	add	r3, sp, #12
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	462a      	mov	r2, r5
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <_svfiprintf_r+0x1f8>)
 80038c4:	a904      	add	r1, sp, #16
 80038c6:	4638      	mov	r0, r7
 80038c8:	f000 f87a 	bl	80039c0 <_printf_i>
 80038cc:	e7eb      	b.n	80038a6 <_svfiprintf_r+0x1c2>
 80038ce:	bf00      	nop
 80038d0:	08004034 	.word	0x08004034
 80038d4:	0800403e 	.word	0x0800403e
 80038d8:	00000000 	.word	0x00000000
 80038dc:	0800362d 	.word	0x0800362d
 80038e0:	0800403a 	.word	0x0800403a

080038e4 <_printf_common>:
 80038e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e8:	4616      	mov	r6, r2
 80038ea:	4699      	mov	r9, r3
 80038ec:	688a      	ldr	r2, [r1, #8]
 80038ee:	690b      	ldr	r3, [r1, #16]
 80038f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bfb8      	it	lt
 80038f8:	4613      	movlt	r3, r2
 80038fa:	6033      	str	r3, [r6, #0]
 80038fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003900:	4607      	mov	r7, r0
 8003902:	460c      	mov	r4, r1
 8003904:	b10a      	cbz	r2, 800390a <_printf_common+0x26>
 8003906:	3301      	adds	r3, #1
 8003908:	6033      	str	r3, [r6, #0]
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	0699      	lsls	r1, r3, #26
 800390e:	bf42      	ittt	mi
 8003910:	6833      	ldrmi	r3, [r6, #0]
 8003912:	3302      	addmi	r3, #2
 8003914:	6033      	strmi	r3, [r6, #0]
 8003916:	6825      	ldr	r5, [r4, #0]
 8003918:	f015 0506 	ands.w	r5, r5, #6
 800391c:	d106      	bne.n	800392c <_printf_common+0x48>
 800391e:	f104 0a19 	add.w	sl, r4, #25
 8003922:	68e3      	ldr	r3, [r4, #12]
 8003924:	6832      	ldr	r2, [r6, #0]
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	42ab      	cmp	r3, r5
 800392a:	dc26      	bgt.n	800397a <_printf_common+0x96>
 800392c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003930:	1e13      	subs	r3, r2, #0
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	bf18      	it	ne
 8003936:	2301      	movne	r3, #1
 8003938:	0692      	lsls	r2, r2, #26
 800393a:	d42b      	bmi.n	8003994 <_printf_common+0xb0>
 800393c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003940:	4649      	mov	r1, r9
 8003942:	4638      	mov	r0, r7
 8003944:	47c0      	blx	r8
 8003946:	3001      	adds	r0, #1
 8003948:	d01e      	beq.n	8003988 <_printf_common+0xa4>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	68e5      	ldr	r5, [r4, #12]
 800394e:	6832      	ldr	r2, [r6, #0]
 8003950:	f003 0306 	and.w	r3, r3, #6
 8003954:	2b04      	cmp	r3, #4
 8003956:	bf08      	it	eq
 8003958:	1aad      	subeq	r5, r5, r2
 800395a:	68a3      	ldr	r3, [r4, #8]
 800395c:	6922      	ldr	r2, [r4, #16]
 800395e:	bf0c      	ite	eq
 8003960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003964:	2500      	movne	r5, #0
 8003966:	4293      	cmp	r3, r2
 8003968:	bfc4      	itt	gt
 800396a:	1a9b      	subgt	r3, r3, r2
 800396c:	18ed      	addgt	r5, r5, r3
 800396e:	2600      	movs	r6, #0
 8003970:	341a      	adds	r4, #26
 8003972:	42b5      	cmp	r5, r6
 8003974:	d11a      	bne.n	80039ac <_printf_common+0xc8>
 8003976:	2000      	movs	r0, #0
 8003978:	e008      	b.n	800398c <_printf_common+0xa8>
 800397a:	2301      	movs	r3, #1
 800397c:	4652      	mov	r2, sl
 800397e:	4649      	mov	r1, r9
 8003980:	4638      	mov	r0, r7
 8003982:	47c0      	blx	r8
 8003984:	3001      	adds	r0, #1
 8003986:	d103      	bne.n	8003990 <_printf_common+0xac>
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003990:	3501      	adds	r5, #1
 8003992:	e7c6      	b.n	8003922 <_printf_common+0x3e>
 8003994:	18e1      	adds	r1, r4, r3
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	2030      	movs	r0, #48	; 0x30
 800399a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800399e:	4422      	add	r2, r4
 80039a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a8:	3302      	adds	r3, #2
 80039aa:	e7c7      	b.n	800393c <_printf_common+0x58>
 80039ac:	2301      	movs	r3, #1
 80039ae:	4622      	mov	r2, r4
 80039b0:	4649      	mov	r1, r9
 80039b2:	4638      	mov	r0, r7
 80039b4:	47c0      	blx	r8
 80039b6:	3001      	adds	r0, #1
 80039b8:	d0e6      	beq.n	8003988 <_printf_common+0xa4>
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7d9      	b.n	8003972 <_printf_common+0x8e>
	...

080039c0 <_printf_i>:
 80039c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c4:	460c      	mov	r4, r1
 80039c6:	4691      	mov	r9, r2
 80039c8:	7e27      	ldrb	r7, [r4, #24]
 80039ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039cc:	2f78      	cmp	r7, #120	; 0x78
 80039ce:	4680      	mov	r8, r0
 80039d0:	469a      	mov	sl, r3
 80039d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039d6:	d807      	bhi.n	80039e8 <_printf_i+0x28>
 80039d8:	2f62      	cmp	r7, #98	; 0x62
 80039da:	d80a      	bhi.n	80039f2 <_printf_i+0x32>
 80039dc:	2f00      	cmp	r7, #0
 80039de:	f000 80d8 	beq.w	8003b92 <_printf_i+0x1d2>
 80039e2:	2f58      	cmp	r7, #88	; 0x58
 80039e4:	f000 80a3 	beq.w	8003b2e <_printf_i+0x16e>
 80039e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039f0:	e03a      	b.n	8003a68 <_printf_i+0xa8>
 80039f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039f6:	2b15      	cmp	r3, #21
 80039f8:	d8f6      	bhi.n	80039e8 <_printf_i+0x28>
 80039fa:	a001      	add	r0, pc, #4	; (adr r0, 8003a00 <_printf_i+0x40>)
 80039fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003a6d 	.word	0x08003a6d
 8003a08:	080039e9 	.word	0x080039e9
 8003a0c:	080039e9 	.word	0x080039e9
 8003a10:	080039e9 	.word	0x080039e9
 8003a14:	080039e9 	.word	0x080039e9
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	080039e9 	.word	0x080039e9
 8003a20:	080039e9 	.word	0x080039e9
 8003a24:	080039e9 	.word	0x080039e9
 8003a28:	080039e9 	.word	0x080039e9
 8003a2c:	08003b79 	.word	0x08003b79
 8003a30:	08003a9d 	.word	0x08003a9d
 8003a34:	08003b5b 	.word	0x08003b5b
 8003a38:	080039e9 	.word	0x080039e9
 8003a3c:	080039e9 	.word	0x080039e9
 8003a40:	08003b9b 	.word	0x08003b9b
 8003a44:	080039e9 	.word	0x080039e9
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	080039e9 	.word	0x080039e9
 8003a50:	080039e9 	.word	0x080039e9
 8003a54:	08003b63 	.word	0x08003b63
 8003a58:	680b      	ldr	r3, [r1, #0]
 8003a5a:	1d1a      	adds	r2, r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	600a      	str	r2, [r1, #0]
 8003a60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0a3      	b.n	8003bb4 <_printf_i+0x1f4>
 8003a6c:	6825      	ldr	r5, [r4, #0]
 8003a6e:	6808      	ldr	r0, [r1, #0]
 8003a70:	062e      	lsls	r6, r5, #24
 8003a72:	f100 0304 	add.w	r3, r0, #4
 8003a76:	d50a      	bpl.n	8003a8e <_printf_i+0xce>
 8003a78:	6805      	ldr	r5, [r0, #0]
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	2d00      	cmp	r5, #0
 8003a7e:	da03      	bge.n	8003a88 <_printf_i+0xc8>
 8003a80:	232d      	movs	r3, #45	; 0x2d
 8003a82:	426d      	negs	r5, r5
 8003a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a88:	485e      	ldr	r0, [pc, #376]	; (8003c04 <_printf_i+0x244>)
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	e019      	b.n	8003ac2 <_printf_i+0x102>
 8003a8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a92:	6805      	ldr	r5, [r0, #0]
 8003a94:	600b      	str	r3, [r1, #0]
 8003a96:	bf18      	it	ne
 8003a98:	b22d      	sxthne	r5, r5
 8003a9a:	e7ef      	b.n	8003a7c <_printf_i+0xbc>
 8003a9c:	680b      	ldr	r3, [r1, #0]
 8003a9e:	6825      	ldr	r5, [r4, #0]
 8003aa0:	1d18      	adds	r0, r3, #4
 8003aa2:	6008      	str	r0, [r1, #0]
 8003aa4:	0628      	lsls	r0, r5, #24
 8003aa6:	d501      	bpl.n	8003aac <_printf_i+0xec>
 8003aa8:	681d      	ldr	r5, [r3, #0]
 8003aaa:	e002      	b.n	8003ab2 <_printf_i+0xf2>
 8003aac:	0669      	lsls	r1, r5, #25
 8003aae:	d5fb      	bpl.n	8003aa8 <_printf_i+0xe8>
 8003ab0:	881d      	ldrh	r5, [r3, #0]
 8003ab2:	4854      	ldr	r0, [pc, #336]	; (8003c04 <_printf_i+0x244>)
 8003ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2308      	moveq	r3, #8
 8003aba:	230a      	movne	r3, #10
 8003abc:	2100      	movs	r1, #0
 8003abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ac2:	6866      	ldr	r6, [r4, #4]
 8003ac4:	60a6      	str	r6, [r4, #8]
 8003ac6:	2e00      	cmp	r6, #0
 8003ac8:	bfa2      	ittt	ge
 8003aca:	6821      	ldrge	r1, [r4, #0]
 8003acc:	f021 0104 	bicge.w	r1, r1, #4
 8003ad0:	6021      	strge	r1, [r4, #0]
 8003ad2:	b90d      	cbnz	r5, 8003ad8 <_printf_i+0x118>
 8003ad4:	2e00      	cmp	r6, #0
 8003ad6:	d04d      	beq.n	8003b74 <_printf_i+0x1b4>
 8003ad8:	4616      	mov	r6, r2
 8003ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ade:	fb03 5711 	mls	r7, r3, r1, r5
 8003ae2:	5dc7      	ldrb	r7, [r0, r7]
 8003ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ae8:	462f      	mov	r7, r5
 8003aea:	42bb      	cmp	r3, r7
 8003aec:	460d      	mov	r5, r1
 8003aee:	d9f4      	bls.n	8003ada <_printf_i+0x11a>
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d10b      	bne.n	8003b0c <_printf_i+0x14c>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	07df      	lsls	r7, r3, #31
 8003af8:	d508      	bpl.n	8003b0c <_printf_i+0x14c>
 8003afa:	6923      	ldr	r3, [r4, #16]
 8003afc:	6861      	ldr	r1, [r4, #4]
 8003afe:	4299      	cmp	r1, r3
 8003b00:	bfde      	ittt	le
 8003b02:	2330      	movle	r3, #48	; 0x30
 8003b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b0c:	1b92      	subs	r2, r2, r6
 8003b0e:	6122      	str	r2, [r4, #16]
 8003b10:	f8cd a000 	str.w	sl, [sp]
 8003b14:	464b      	mov	r3, r9
 8003b16:	aa03      	add	r2, sp, #12
 8003b18:	4621      	mov	r1, r4
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	f7ff fee2 	bl	80038e4 <_printf_common>
 8003b20:	3001      	adds	r0, #1
 8003b22:	d14c      	bne.n	8003bbe <_printf_i+0x1fe>
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	b004      	add	sp, #16
 8003b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b2e:	4835      	ldr	r0, [pc, #212]	; (8003c04 <_printf_i+0x244>)
 8003b30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	680e      	ldr	r6, [r1, #0]
 8003b38:	061f      	lsls	r7, r3, #24
 8003b3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b3e:	600e      	str	r6, [r1, #0]
 8003b40:	d514      	bpl.n	8003b6c <_printf_i+0x1ac>
 8003b42:	07d9      	lsls	r1, r3, #31
 8003b44:	bf44      	itt	mi
 8003b46:	f043 0320 	orrmi.w	r3, r3, #32
 8003b4a:	6023      	strmi	r3, [r4, #0]
 8003b4c:	b91d      	cbnz	r5, 8003b56 <_printf_i+0x196>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	f023 0320 	bic.w	r3, r3, #32
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	2310      	movs	r3, #16
 8003b58:	e7b0      	b.n	8003abc <_printf_i+0xfc>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	f043 0320 	orr.w	r3, r3, #32
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	2378      	movs	r3, #120	; 0x78
 8003b64:	4828      	ldr	r0, [pc, #160]	; (8003c08 <_printf_i+0x248>)
 8003b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b6a:	e7e3      	b.n	8003b34 <_printf_i+0x174>
 8003b6c:	065e      	lsls	r6, r3, #25
 8003b6e:	bf48      	it	mi
 8003b70:	b2ad      	uxthmi	r5, r5
 8003b72:	e7e6      	b.n	8003b42 <_printf_i+0x182>
 8003b74:	4616      	mov	r6, r2
 8003b76:	e7bb      	b.n	8003af0 <_printf_i+0x130>
 8003b78:	680b      	ldr	r3, [r1, #0]
 8003b7a:	6826      	ldr	r6, [r4, #0]
 8003b7c:	6960      	ldr	r0, [r4, #20]
 8003b7e:	1d1d      	adds	r5, r3, #4
 8003b80:	600d      	str	r5, [r1, #0]
 8003b82:	0635      	lsls	r5, r6, #24
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	d501      	bpl.n	8003b8c <_printf_i+0x1cc>
 8003b88:	6018      	str	r0, [r3, #0]
 8003b8a:	e002      	b.n	8003b92 <_printf_i+0x1d2>
 8003b8c:	0671      	lsls	r1, r6, #25
 8003b8e:	d5fb      	bpl.n	8003b88 <_printf_i+0x1c8>
 8003b90:	8018      	strh	r0, [r3, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	6123      	str	r3, [r4, #16]
 8003b96:	4616      	mov	r6, r2
 8003b98:	e7ba      	b.n	8003b10 <_printf_i+0x150>
 8003b9a:	680b      	ldr	r3, [r1, #0]
 8003b9c:	1d1a      	adds	r2, r3, #4
 8003b9e:	600a      	str	r2, [r1, #0]
 8003ba0:	681e      	ldr	r6, [r3, #0]
 8003ba2:	6862      	ldr	r2, [r4, #4]
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f7fc fb22 	bl	80001f0 <memchr>
 8003bac:	b108      	cbz	r0, 8003bb2 <_printf_i+0x1f2>
 8003bae:	1b80      	subs	r0, r0, r6
 8003bb0:	6060      	str	r0, [r4, #4]
 8003bb2:	6863      	ldr	r3, [r4, #4]
 8003bb4:	6123      	str	r3, [r4, #16]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bbc:	e7a8      	b.n	8003b10 <_printf_i+0x150>
 8003bbe:	6923      	ldr	r3, [r4, #16]
 8003bc0:	4632      	mov	r2, r6
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	4640      	mov	r0, r8
 8003bc6:	47d0      	blx	sl
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d0ab      	beq.n	8003b24 <_printf_i+0x164>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	079b      	lsls	r3, r3, #30
 8003bd0:	d413      	bmi.n	8003bfa <_printf_i+0x23a>
 8003bd2:	68e0      	ldr	r0, [r4, #12]
 8003bd4:	9b03      	ldr	r3, [sp, #12]
 8003bd6:	4298      	cmp	r0, r3
 8003bd8:	bfb8      	it	lt
 8003bda:	4618      	movlt	r0, r3
 8003bdc:	e7a4      	b.n	8003b28 <_printf_i+0x168>
 8003bde:	2301      	movs	r3, #1
 8003be0:	4632      	mov	r2, r6
 8003be2:	4649      	mov	r1, r9
 8003be4:	4640      	mov	r0, r8
 8003be6:	47d0      	blx	sl
 8003be8:	3001      	adds	r0, #1
 8003bea:	d09b      	beq.n	8003b24 <_printf_i+0x164>
 8003bec:	3501      	adds	r5, #1
 8003bee:	68e3      	ldr	r3, [r4, #12]
 8003bf0:	9903      	ldr	r1, [sp, #12]
 8003bf2:	1a5b      	subs	r3, r3, r1
 8003bf4:	42ab      	cmp	r3, r5
 8003bf6:	dcf2      	bgt.n	8003bde <_printf_i+0x21e>
 8003bf8:	e7eb      	b.n	8003bd2 <_printf_i+0x212>
 8003bfa:	2500      	movs	r5, #0
 8003bfc:	f104 0619 	add.w	r6, r4, #25
 8003c00:	e7f5      	b.n	8003bee <_printf_i+0x22e>
 8003c02:	bf00      	nop
 8003c04:	08004045 	.word	0x08004045
 8003c08:	08004056 	.word	0x08004056

08003c0c <memmove>:
 8003c0c:	4288      	cmp	r0, r1
 8003c0e:	b510      	push	{r4, lr}
 8003c10:	eb01 0402 	add.w	r4, r1, r2
 8003c14:	d902      	bls.n	8003c1c <memmove+0x10>
 8003c16:	4284      	cmp	r4, r0
 8003c18:	4623      	mov	r3, r4
 8003c1a:	d807      	bhi.n	8003c2c <memmove+0x20>
 8003c1c:	1e43      	subs	r3, r0, #1
 8003c1e:	42a1      	cmp	r1, r4
 8003c20:	d008      	beq.n	8003c34 <memmove+0x28>
 8003c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c2a:	e7f8      	b.n	8003c1e <memmove+0x12>
 8003c2c:	4402      	add	r2, r0
 8003c2e:	4601      	mov	r1, r0
 8003c30:	428a      	cmp	r2, r1
 8003c32:	d100      	bne.n	8003c36 <memmove+0x2a>
 8003c34:	bd10      	pop	{r4, pc}
 8003c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c3e:	e7f7      	b.n	8003c30 <memmove+0x24>

08003c40 <_free_r>:
 8003c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c42:	2900      	cmp	r1, #0
 8003c44:	d048      	beq.n	8003cd8 <_free_r+0x98>
 8003c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c4a:	9001      	str	r0, [sp, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c52:	bfb8      	it	lt
 8003c54:	18e4      	addlt	r4, r4, r3
 8003c56:	f000 f8d3 	bl	8003e00 <__malloc_lock>
 8003c5a:	4a20      	ldr	r2, [pc, #128]	; (8003cdc <_free_r+0x9c>)
 8003c5c:	9801      	ldr	r0, [sp, #4]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	4615      	mov	r5, r2
 8003c62:	b933      	cbnz	r3, 8003c72 <_free_r+0x32>
 8003c64:	6063      	str	r3, [r4, #4]
 8003c66:	6014      	str	r4, [r2, #0]
 8003c68:	b003      	add	sp, #12
 8003c6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c6e:	f000 b8cd 	b.w	8003e0c <__malloc_unlock>
 8003c72:	42a3      	cmp	r3, r4
 8003c74:	d90b      	bls.n	8003c8e <_free_r+0x4e>
 8003c76:	6821      	ldr	r1, [r4, #0]
 8003c78:	1862      	adds	r2, r4, r1
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	bf04      	itt	eq
 8003c7e:	681a      	ldreq	r2, [r3, #0]
 8003c80:	685b      	ldreq	r3, [r3, #4]
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	bf04      	itt	eq
 8003c86:	1852      	addeq	r2, r2, r1
 8003c88:	6022      	streq	r2, [r4, #0]
 8003c8a:	602c      	str	r4, [r5, #0]
 8003c8c:	e7ec      	b.n	8003c68 <_free_r+0x28>
 8003c8e:	461a      	mov	r2, r3
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b10b      	cbz	r3, 8003c98 <_free_r+0x58>
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d9fa      	bls.n	8003c8e <_free_r+0x4e>
 8003c98:	6811      	ldr	r1, [r2, #0]
 8003c9a:	1855      	adds	r5, r2, r1
 8003c9c:	42a5      	cmp	r5, r4
 8003c9e:	d10b      	bne.n	8003cb8 <_free_r+0x78>
 8003ca0:	6824      	ldr	r4, [r4, #0]
 8003ca2:	4421      	add	r1, r4
 8003ca4:	1854      	adds	r4, r2, r1
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	d1dd      	bne.n	8003c68 <_free_r+0x28>
 8003cac:	681c      	ldr	r4, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	6053      	str	r3, [r2, #4]
 8003cb2:	4421      	add	r1, r4
 8003cb4:	6011      	str	r1, [r2, #0]
 8003cb6:	e7d7      	b.n	8003c68 <_free_r+0x28>
 8003cb8:	d902      	bls.n	8003cc0 <_free_r+0x80>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	6003      	str	r3, [r0, #0]
 8003cbe:	e7d3      	b.n	8003c68 <_free_r+0x28>
 8003cc0:	6825      	ldr	r5, [r4, #0]
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	bf04      	itt	eq
 8003cc8:	6819      	ldreq	r1, [r3, #0]
 8003cca:	685b      	ldreq	r3, [r3, #4]
 8003ccc:	6063      	str	r3, [r4, #4]
 8003cce:	bf04      	itt	eq
 8003cd0:	1949      	addeq	r1, r1, r5
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	6054      	str	r4, [r2, #4]
 8003cd6:	e7c7      	b.n	8003c68 <_free_r+0x28>
 8003cd8:	b003      	add	sp, #12
 8003cda:	bd30      	pop	{r4, r5, pc}
 8003cdc:	200001bc 	.word	0x200001bc

08003ce0 <_malloc_r>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	1ccd      	adds	r5, r1, #3
 8003ce4:	f025 0503 	bic.w	r5, r5, #3
 8003ce8:	3508      	adds	r5, #8
 8003cea:	2d0c      	cmp	r5, #12
 8003cec:	bf38      	it	cc
 8003cee:	250c      	movcc	r5, #12
 8003cf0:	2d00      	cmp	r5, #0
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	db01      	blt.n	8003cfa <_malloc_r+0x1a>
 8003cf6:	42a9      	cmp	r1, r5
 8003cf8:	d903      	bls.n	8003d02 <_malloc_r+0x22>
 8003cfa:	230c      	movs	r3, #12
 8003cfc:	6033      	str	r3, [r6, #0]
 8003cfe:	2000      	movs	r0, #0
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d02:	f000 f87d 	bl	8003e00 <__malloc_lock>
 8003d06:	4921      	ldr	r1, [pc, #132]	; (8003d8c <_malloc_r+0xac>)
 8003d08:	680a      	ldr	r2, [r1, #0]
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	b99c      	cbnz	r4, 8003d36 <_malloc_r+0x56>
 8003d0e:	4f20      	ldr	r7, [pc, #128]	; (8003d90 <_malloc_r+0xb0>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b923      	cbnz	r3, 8003d1e <_malloc_r+0x3e>
 8003d14:	4621      	mov	r1, r4
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 f862 	bl	8003de0 <_sbrk_r>
 8003d1c:	6038      	str	r0, [r7, #0]
 8003d1e:	4629      	mov	r1, r5
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 f85d 	bl	8003de0 <_sbrk_r>
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d123      	bne.n	8003d72 <_malloc_r+0x92>
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	6033      	str	r3, [r6, #0]
 8003d2e:	4630      	mov	r0, r6
 8003d30:	f000 f86c 	bl	8003e0c <__malloc_unlock>
 8003d34:	e7e3      	b.n	8003cfe <_malloc_r+0x1e>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	1b5b      	subs	r3, r3, r5
 8003d3a:	d417      	bmi.n	8003d6c <_malloc_r+0x8c>
 8003d3c:	2b0b      	cmp	r3, #11
 8003d3e:	d903      	bls.n	8003d48 <_malloc_r+0x68>
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	441c      	add	r4, r3
 8003d44:	6025      	str	r5, [r4, #0]
 8003d46:	e004      	b.n	8003d52 <_malloc_r+0x72>
 8003d48:	6863      	ldr	r3, [r4, #4]
 8003d4a:	42a2      	cmp	r2, r4
 8003d4c:	bf0c      	ite	eq
 8003d4e:	600b      	streq	r3, [r1, #0]
 8003d50:	6053      	strne	r3, [r2, #4]
 8003d52:	4630      	mov	r0, r6
 8003d54:	f000 f85a 	bl	8003e0c <__malloc_unlock>
 8003d58:	f104 000b 	add.w	r0, r4, #11
 8003d5c:	1d23      	adds	r3, r4, #4
 8003d5e:	f020 0007 	bic.w	r0, r0, #7
 8003d62:	1ac2      	subs	r2, r0, r3
 8003d64:	d0cc      	beq.n	8003d00 <_malloc_r+0x20>
 8003d66:	1a1b      	subs	r3, r3, r0
 8003d68:	50a3      	str	r3, [r4, r2]
 8003d6a:	e7c9      	b.n	8003d00 <_malloc_r+0x20>
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	6864      	ldr	r4, [r4, #4]
 8003d70:	e7cc      	b.n	8003d0c <_malloc_r+0x2c>
 8003d72:	1cc4      	adds	r4, r0, #3
 8003d74:	f024 0403 	bic.w	r4, r4, #3
 8003d78:	42a0      	cmp	r0, r4
 8003d7a:	d0e3      	beq.n	8003d44 <_malloc_r+0x64>
 8003d7c:	1a21      	subs	r1, r4, r0
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f000 f82e 	bl	8003de0 <_sbrk_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d1dd      	bne.n	8003d44 <_malloc_r+0x64>
 8003d88:	e7cf      	b.n	8003d2a <_malloc_r+0x4a>
 8003d8a:	bf00      	nop
 8003d8c:	200001bc 	.word	0x200001bc
 8003d90:	200001c0 	.word	0x200001c0

08003d94 <_realloc_r>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	4607      	mov	r7, r0
 8003d98:	4614      	mov	r4, r2
 8003d9a:	460e      	mov	r6, r1
 8003d9c:	b921      	cbnz	r1, 8003da8 <_realloc_r+0x14>
 8003d9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003da2:	4611      	mov	r1, r2
 8003da4:	f7ff bf9c 	b.w	8003ce0 <_malloc_r>
 8003da8:	b922      	cbnz	r2, 8003db4 <_realloc_r+0x20>
 8003daa:	f7ff ff49 	bl	8003c40 <_free_r>
 8003dae:	4625      	mov	r5, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db4:	f000 f830 	bl	8003e18 <_malloc_usable_size_r>
 8003db8:	42a0      	cmp	r0, r4
 8003dba:	d20f      	bcs.n	8003ddc <_realloc_r+0x48>
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	f7ff ff8e 	bl	8003ce0 <_malloc_r>
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d0f2      	beq.n	8003db0 <_realloc_r+0x1c>
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4622      	mov	r2, r4
 8003dce:	f7ff fbf7 	bl	80035c0 <memcpy>
 8003dd2:	4631      	mov	r1, r6
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff ff33 	bl	8003c40 <_free_r>
 8003dda:	e7e9      	b.n	8003db0 <_realloc_r+0x1c>
 8003ddc:	4635      	mov	r5, r6
 8003dde:	e7e7      	b.n	8003db0 <_realloc_r+0x1c>

08003de0 <_sbrk_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4d06      	ldr	r5, [pc, #24]	; (8003dfc <_sbrk_r+0x1c>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	f7fd f930 	bl	8001050 <_sbrk>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_sbrk_r+0x1a>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_sbrk_r+0x1a>
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	20000248 	.word	0x20000248

08003e00 <__malloc_lock>:
 8003e00:	4801      	ldr	r0, [pc, #4]	; (8003e08 <__malloc_lock+0x8>)
 8003e02:	f000 b811 	b.w	8003e28 <__retarget_lock_acquire_recursive>
 8003e06:	bf00      	nop
 8003e08:	20000250 	.word	0x20000250

08003e0c <__malloc_unlock>:
 8003e0c:	4801      	ldr	r0, [pc, #4]	; (8003e14 <__malloc_unlock+0x8>)
 8003e0e:	f000 b80c 	b.w	8003e2a <__retarget_lock_release_recursive>
 8003e12:	bf00      	nop
 8003e14:	20000250 	.word	0x20000250

08003e18 <_malloc_usable_size_r>:
 8003e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e1c:	1f18      	subs	r0, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bfbc      	itt	lt
 8003e22:	580b      	ldrlt	r3, [r1, r0]
 8003e24:	18c0      	addlt	r0, r0, r3
 8003e26:	4770      	bx	lr

08003e28 <__retarget_lock_acquire_recursive>:
 8003e28:	4770      	bx	lr

08003e2a <__retarget_lock_release_recursive>:
 8003e2a:	4770      	bx	lr

08003e2c <_init>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr

08003e38 <_fini>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	bf00      	nop
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr
